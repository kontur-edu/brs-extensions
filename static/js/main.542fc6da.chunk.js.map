{"version":3,"sources":["apis/brsApi.ts","GoogleAuthService.ts","BrsCheck.tsx","SpreadsheetForm.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StudentFailure","TermType","baseUrl","brsProxy","globalSid","setSid","sid","getDisciplineInternalAsync","year","termType","course","isModule","a","queryString","requestApiJsonAsync","disciplines","paging","content","authAsync","login","password","request","url","method","body","resolveWithFullResponse","simple","headers","response","Error","sessionCookie","filter","cookie","startsWith","split","substr","length","trim","uri","options","requestApiAsync","trimLeft","JSON","parse","console","log","CLIENT_ID","API_KEY","BrsCheck","type","id","placeholder","value","onClick","loadBrs","disabled","document","getElementById","loadBrsBtn","alert","brsApi","then","localStorage","setItem","removeAttribute","getItem","Fall","label","innerText","discipline","DISCOVERY_DOCS","init","googleApiKey","googleClientId","loadData","gapi","load","initClient","client","apiKey","clientId","discoveryDocs","scope","events","onSignInStatusChanged","signedIn","auth2","getAuthInstance","isSignedIn","listen","get","onError","signIn","signOut","spreadsheetId","sheetName","range","SpreadsheetForm","className","auth","style","display","defaultValue","onBlur","event","target","listMajors","clearTable","authBtn","initBtn","appendPre","message","table","row","createElement","appendChild","sheets","spreadsheets","values","result","join","error","innerHTML","signOutBtn","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.542fc6da.chunk.js","sourcesContent":["import 'bluebird';\r\n// import * as fs from 'fs';\r\nimport request from 'request-promise';\r\n// import * as cache from '../helpers/cache';\r\n\r\nconst brsProxy = \"https://brs-proxy.herokuapp.com\"\r\nconst baseUrl = brsProxy + '/brs/https://brs.urfu.ru/mrd';\r\nlet globalSid: string | null = 'null';\r\nlet globalLogin: string | null = null;\r\n\r\nexport function setSid(sid: string) {\r\n    globalSid = sid;\r\n}\r\n\r\nexport enum StudentFailure {\r\n    /** -, дефис, все хорошо */ NoFailure = -1,\r\n    /** Не выбрана */ NotChosen = -19,\r\n    /** Не допущен (деканат) */ NotAllowedByDeansOffice = -18,\r\n    /** Не явился */ NotAppeared = 0,\r\n    /** Неуважительная */ DisrespectfulReason = 12,\r\n    /** Уважительная */ RespectfulReason = 13,\r\n    /** Не допущен */ NotAllowedByTeacher = 18,\r\n    /** Не должен сдавать */ ShouldNotPass = 19,\r\n    /** Академический отпуск */ AcademicLeave = 20,\r\n    /** Выбыл */ DroppedOut = 21,\r\n}\r\n\r\nexport enum TermType {\r\n    Fall = 1,\r\n    Spring = 2,\r\n}\r\n\r\nexport async function getDisciplineCachedAsync(\r\n    year: number,\r\n    termType: TermType,\r\n    course: number,\r\n    isModule: boolean\r\n) {\r\n    const cacheName = `${globalLogin}_getDiscipline_${year}_${termType}_${course}_${isModule}`;\r\n    const cacheResult = null;\r\n    if (cacheResult) {\r\n        return cacheResult;\r\n    }\r\n\r\n    const result = await getDisciplineInternalAsync(\r\n        year,\r\n        termType,\r\n        course,\r\n        isModule\r\n    );\r\n    // cache.save(cacheName, result);\r\n    return result;\r\n}\r\n\r\nexport async function getDisciplineInternalAsync(\r\n    year: number,\r\n    termType: TermType,\r\n    course: number,\r\n    isModule: boolean\r\n) {\r\n    const queryString = `?year=${year}&termType=${termType}&course=${course}&total=0&page=1&pageSize=1000&search=`;\r\n    if (isModule) {\r\n        const disciplines = await requestApiJsonAsync<Discipline[]>(\r\n            '/mvc/mobile/module/fetch' + queryString\r\n        );\r\n        for (const d of disciplines) {\r\n            d.isModule = true;\r\n        }\r\n        return disciplines;\r\n    } else {\r\n        const paging = await requestApiJsonAsync<Paging<Discipline>>(\r\n            '/mvc/mobile/discipline/fetch' + queryString\r\n        );\r\n        const disciplines = paging.content;\r\n        for (const d of disciplines) {\r\n            d.isModule = false;\r\n        }\r\n        return disciplines;\r\n    }\r\n}\r\n\r\nexport async function getAllStudentMarksAsync(discipline: Discipline) {\r\n    const students = [\r\n        ...(await getStudentMarksAsync(discipline, 'lecture', 'current')),\r\n        ...(await getStudentMarksAsync(discipline, 'lecture', 'intermediate')),\r\n        ...(await getStudentMarksAsync(discipline, 'laboratory', 'current')),\r\n        ...(await getStudentMarksAsync(discipline, 'laboratory', 'intermediate')),\r\n    ];\r\n\r\n    const uniqueStudents: { [id: string]: StudentMark } = {};\r\n    for (const s of students) {\r\n        const knownStudent = uniqueStudents[s.studentUuid] || {};\r\n        uniqueStudents[s.studentUuid] = {...knownStudent, ...s};\r\n    }\r\n\r\n    return Object.keys(uniqueStudents).map(k => uniqueStudents[k]);\r\n}\r\n\r\nasync function getStudentMarksAsync(\r\n    discipline: Discipline,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    return getStudentMarksInternalAsync(\r\n        discipline.disciplineLoad,\r\n        discipline.isModule,\r\n        discipline.groupHistoryId,\r\n        discipline.groupId,\r\n        cardType,\r\n        markType\r\n    );\r\n}\r\n\r\nasync function getStudentMarksInternalAsync(\r\n    disciplineLoad: string,\r\n    isModule: boolean,\r\n    groupUuid: string,\r\n    techgroup: string,\r\n    cardType: CardType,\r\n    markType: MarkType,\r\n    isTotal: boolean = false,\r\n    showActiveStudents: boolean = false\r\n) {\r\n    const groupPart = isModule\r\n        ? `techgroup=${techgroup}`\r\n        : `groupUuid=${groupUuid}`;\r\n    return requestApiJsonAsync<StudentMark[]>(\r\n        `/mvc/mobile/studentMarks/fetch?disciplineLoad=${disciplineLoad}&${groupPart}` +\r\n        `&cardType=${cardType}&hasTest=false&isTotal=${isTotal}` +\r\n        `&intermediate=${markType === 'intermediate'}` +\r\n        `&selectedTeachers=null&showActiveStudents=${showActiveStudents}`\r\n    );\r\n}\r\n\r\nexport async function getAllControlActionsCachedAsync(discipline: Discipline) {\r\n    return [\r\n        ...(await getControlActionsCachedAsync(discipline, 'lecture', 'current')),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'lecture',\r\n            'intermediate'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'laboratory',\r\n            'current'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'laboratory',\r\n            'intermediate'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(discipline, 'practice', 'current')),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'practice',\r\n            'intermediate'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'additionalPractice',\r\n            'current'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'additionalPractice',\r\n            'intermediate'\r\n        )),\r\n    ];\r\n}\r\n\r\nasync function getControlActionsCachedAsync(\r\n    discipline: Discipline,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    const cacheName = `${globalLogin}_getControlActions_${discipline.disciplineLoad}_${discipline.isModule}_${discipline.groupHistoryId}_${discipline.groupId}_${cardType}_${markType}`;\r\n    const cacheResult = null//cache.read<ControlAction[]>(cacheName);\r\n    if (cacheResult) {\r\n        return cacheResult;\r\n    }\r\n\r\n    const result = await getControlActionsInternalAsync(\r\n        discipline.disciplineLoad,\r\n        discipline.isModule,\r\n        discipline.groupHistoryId,\r\n        discipline.groupId,\r\n        cardType,\r\n        markType\r\n    );\r\n    // cache.save(cacheName, result);\r\n    return result;\r\n}\r\n\r\nasync function getControlActionsInternalAsync(\r\n    disciplineLoad: string,\r\n    isModule: boolean,\r\n    groupUuid: string,\r\n    techgroup: string,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    const modulePart = isModule ? '/module' : '';\r\n    const groupPart = isModule ? techgroup : groupUuid;\r\n    const response = await requestApiAsync<string>(\r\n        `/mvc/mobile/view/mark/${disciplineLoad}/${groupPart}/teachers${modulePart}/${cardType}/${markType}`\r\n    );\r\n\r\n    const prefix = 'gridColumns = toTextArray(';\r\n    const suffix = ');';\r\n    const linesWithId = response\r\n        .split('\\r\\n')\r\n        .map(s => s.trim())\r\n        .filter(s => s.startsWith(prefix));\r\n    if (linesWithId.length !== 1) {\r\n        throw new Error(\r\n            'Control actions page should contain single line target line with techcard identifier'\r\n        );\r\n    }\r\n\r\n    const columns: Array<{ controlAction: string; uuid: string }> =\r\n        JSON.parse(\r\n            linesWithId[0].substr(\r\n                prefix.length,\r\n                linesWithId[0].length - prefix.length - suffix.length\r\n            )\r\n        ) || [];\r\n\r\n    const uuidPrefix = 'technologyCard';\r\n    const result = columns\r\n        .filter(c => c.uuid && c.uuid.startsWith(uuidPrefix))\r\n        .map(c => ({\r\n            uuid: c.uuid,\r\n            uuidWithoutPrefix: c.uuid.substr(uuidPrefix.length),\r\n            controlAction: c.controlAction,\r\n        }));\r\n    return result as ControlAction[];\r\n}\r\n\r\nexport async function putStudentMarkAsync(\r\n    studentUuid: string,\r\n    controlActionId: string,\r\n    mark: number,\r\n    groupId: string,\r\n    cardTypeKey: CardType,\r\n    disciplineLoadUuid: string\r\n) {\r\n    const body = `student=${studentUuid}&techcard=${controlActionId}&mark=${\r\n        isNaN(mark) ? '' : mark.toString()\r\n    }&groupId=${groupId}&cardTypeKey=${cardTypeKey}&disciplineLoadUuid=${disciplineLoadUuid}`;\r\n    return requestApiJsonAsync<StudentMark>(\r\n        `/mvc/mobile/studentMarks/put`,\r\n        {\r\n            method: 'POST',\r\n            body,\r\n            json: false,\r\n        },\r\n        {\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        }\r\n    );\r\n}\r\n\r\nexport async function putStudentFailureAsync(\r\n    studentUuid: string,\r\n    discipline: Discipline,\r\n    studentFailure: StudentFailure = StudentFailure.NoFailure,\r\n    cardType: CardType = 'lecture'\r\n) {\r\n    const body = `markFailure=${studentFailure}&cardType=${cardType}&disciplineLoad=${discipline.disciplineLoad}&studentId=${studentUuid}`;\r\n    await requestApiAsync(\r\n        `/mvc/mobile/failure/update`,\r\n        {\r\n            method: 'POST',\r\n            body,\r\n            json: false,\r\n        },\r\n        {\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        }\r\n    );\r\n}\r\n\r\nexport async function updateAllMarksAsync(discipline: Discipline) {\r\n    // Одного вызова достаточно, чтобы обновить все оценки по предмету у группы.\r\n    await updateMarksAsync(discipline, 'lecture', 'intermediate');\r\n    // await updateMarksAsync(discipline, 'lecture', 'current');\r\n    // await updateMarksAsync(discipline, 'lecture', 'intermediate');\r\n    // await updateMarksAsync(discipline, 'laboratory', 'current');\r\n    // await updateMarksAsync(discipline, 'laboratory', 'intermediate');\r\n    // await updateMarksAsync(discipline, 'practice', 'current');\r\n    // await updateMarksAsync(discipline, 'practice', 'intermediate');\r\n}\r\n\r\nasync function updateMarksAsync(\r\n    discipline: Discipline,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    return updateMarksInternalAsync(\r\n        discipline.disciplineLoad,\r\n        discipline.isModule,\r\n        discipline.groupHistoryId,\r\n        discipline.groupId,\r\n        cardType,\r\n        markType\r\n    );\r\n}\r\n\r\nasync function updateMarksInternalAsync(\r\n    disciplineLoad: string,\r\n    isModule: boolean,\r\n    groupUuid: string,\r\n    techgroup: string,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    const modulePart = isModule ? '/module' : '';\r\n    const groupPart = isModule\r\n        ? `techgroup=${techgroup}`\r\n        : `groupUuid=${groupUuid}`;\r\n    const body =\r\n        `disciplineLoad=${disciplineLoad}&${groupPart}` +\r\n        `&cardType=${cardType}&hasTest=false&isTotal=false` +\r\n        `&intermediate=${markType === 'intermediate'}` +\r\n        `&selectedTeachers=null&showActiveStudents=true`;\r\n    return requestApiAsync<string>(\r\n        `/mvc/mobile/updateMarks${modulePart}`,\r\n        {\r\n            method: 'POST',\r\n            body,\r\n            json: false,\r\n        },\r\n        {\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        }\r\n    );\r\n}\r\n\r\nexport async function authByConfigAsync(secretName: string) {\r\n    const secrets = JSON.parse(\"fs.readFileSync('./secrets/brs.json', 'utf8')\");\r\n    const credentials = secrets[secretName] as {\r\n        login: string;\r\n        password: string;\r\n        sid: string; // содержимое Cookie JSSESSIONID, если sid задается, то все login и password не используются\r\n    };\r\n    if (!credentials) {\r\n        throw new Error(`Secret ${secretName} not found`);\r\n    }\r\n    globalSid = credentials.sid\r\n        ? credentials.sid\r\n        : await authAsync(credentials.login, credentials.password);\r\n    globalLogin = credentials.sid ? secretName : credentials.login;\r\n}\r\n\r\nexport async function authAsync(login: string, password: string): Promise<string> {\r\n    const response = await request({\r\n        url: baseUrl + `/login`,\r\n        method: 'POST',\r\n        body: `username=${login}&password=${password}`,\r\n        resolveWithFullResponse: true,\r\n        simple: false,\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        },\r\n    });\r\n    if (!('set-cookie' in response.headers))\r\n        throw new Error('Wrong credentials');\r\n    const sessionCookie = response.headers['set-cookie']\r\n        .filter((cookie: string) => cookie.startsWith('JSESSIONID='))[0];\r\n    return (sessionCookie as string)\r\n        .split(';')[0]\r\n        .substr('JSESSIONID='.length)\r\n        .trim();\r\n}\r\n\r\nasync function requestApiJsonAsync<T>(\r\n    uri: string,\r\n    options?: RequestOptions,\r\n    headers?: RequestHeaders\r\n): Promise<T> {\r\n    const response = await requestApiAsync<string>(uri, options, headers);\r\n\r\n    if (response.trimLeft().startsWith('<!DOCTYPE html>')) {\r\n        throw new Error(uri + ' is Forbidden');\r\n    }\r\n    return JSON.parse(response);\r\n}\r\n\r\nasync function requestApiAsync<T>(\r\n    uri: string,\r\n    options?: RequestOptions,\r\n    headers?: RequestHeaders\r\n): Promise<T> {\r\n    if (!globalSid) {\r\n        throw new Error(\r\n            'Not authenticated. Use authByConfigAsync or authAsync to authenticate'\r\n        );\r\n    }\r\n    console.log('Sid:', globalSid);\r\n    return request({\r\n        method: 'GET',\r\n        ...options,\r\n        url: baseUrl + uri,\r\n        headers: {\r\n            'X-Cookie': `JSESSIONID=${globalSid}`,\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            ...headers,\r\n        },\r\n    });\r\n}\r\n\r\ninterface RequestOptions {\r\n    method?: string;\r\n    body?: object | string;\r\n    json?: boolean;\r\n}\r\n\r\ninterface RequestHeaders {\r\n    'Content-Type'?: string;\r\n}\r\n\r\nexport type CardType = 'lecture' | 'laboratory' | 'practice' | 'additionalPractice';\r\nexport type MarkType = 'intermediate' | 'current';\r\n\r\ninterface Paging<T> {\r\n    content: T[];\r\n    last: boolean;\r\n    totalPages: number;\r\n    totalElements: number;\r\n    size: number;\r\n    number: number;\r\n    sort: any;\r\n    first: boolean;\r\n    numberOfElements: number;\r\n}\r\n\r\nexport interface RegisterInfo {\r\n    registerInfoStr: string;\r\n    registerId: number;\r\n    passDate: any;\r\n    cardType: string;\r\n    sheet: string;\r\n}\r\n\r\nexport interface Discipline {\r\n    groupId: string;\r\n    discipline: string;\r\n    group: string;\r\n    registerInfo: RegisterInfo[];\r\n    disciplineLoad: string;\r\n    groupHistoryId: string;\r\n    isModule: boolean;\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst studentMarkSample: StudentMark = {\r\n    studentPersonalNumber: '09800106',\r\n    isEdit: false,\r\n    studentUuid:\r\n        'studen18hc2jg0000magk6mi3iec84bsundigr18hc2jg0000m53o7mlgvora278',\r\n    status: 1,\r\n    studentStatus: 'Активный',\r\n    ignoreCurrentDebars: false,\r\n    studentFio: 'Анисимова Маргарита Васильевна',\r\n    isExtern: false,\r\n    teacherName: '',\r\n    cardType: 'lecture',\r\n    studentName: 'Анисимова М.В.',\r\n    studentGroup: 'РИ-180001',\r\n    registerClosed: false,\r\n    subgroupsITS: '',\r\n    disciplineLoad: 'unpldd18hc2jg0000m5kojcd3te76bnk',\r\n};\r\n\r\nexport interface StudentMark {\r\n    studentPersonalNumber: string;\r\n    isEdit: boolean;\r\n    studentUuid: string;\r\n    status: number;\r\n    studentStatus: string;\r\n    ignoreCurrentDebars: boolean;\r\n    studentFio: string;\r\n    isExtern: boolean;\r\n    teacherName: string;\r\n    cardType: CardType;\r\n    studentName: string;\r\n    studentGroup: string;\r\n    registerClosed: boolean;\r\n    subgroupsITS: string;\r\n    disciplineLoad: string;\r\n    failure?: StudentFailure;\r\n    failureName?: string;\r\n\r\n    [props: string]: number | string | boolean | undefined;\r\n}\r\n\r\nexport interface ControlAction {\r\n    uuid: string;\r\n    uuidWithoutPrefix: string;\r\n    controlAction: string;\r\n}\r\n","let CLIENT_ID: string;\r\nlet API_KEY: string;\r\nconst DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\r\nconst SCOPES = \"https://www.googleapis.com/auth/spreadsheets\";\r\nlet initialized = false;\r\n\r\nexport function init(){\r\n    loadData();\r\n    gapi.load('client:auth2', initClient);\r\n}\r\n\r\nfunction loadData(){\r\n    const googleApiKey = localStorage.getItem('google_api_key');\r\n    if (!googleApiKey)\r\n        throw 'No google api key found';\r\n    API_KEY = googleApiKey;\r\n    const googleClientId = localStorage.getItem('google_client_id');\r\n    if (!googleClientId)\r\n        throw 'No google client id';\r\n    CLIENT_ID = googleClientId;\r\n}\r\n\r\nfunction initClient() {\r\n    gapi.client.init({\r\n        apiKey: API_KEY,\r\n        clientId: CLIENT_ID,\r\n        discoveryDocs: DISCOVERY_DOCS,\r\n        scope: SCOPES\r\n    }).then(() => {\r\n        if (!events.onSignInStatusChanged)\r\n            return;\r\n        // @ts-ignore\r\n        const signedIn = gapi.auth2.getAuthInstance().isSignedIn;\r\n        // Listen for sign-in state changes.\r\n        signedIn.listen(events.onSignInStatusChanged);\r\n        // Handle the initial sign-in state.\r\n        events.onSignInStatusChanged(signedIn.get());\r\n    }, events.onError);\r\n}\r\n\r\nexport function signIn() {\r\n    if (!initialized)\r\n        throw 'Not initialized';\r\n    // @ts-ignore\r\n    gapi.auth2.getAuthInstance().signIn();\r\n}\r\n\r\nexport function signOut() {\r\n    if (!initialized)\r\n        throw 'Not initialized';\r\n    // @ts-ignore\r\n    gapi.auth2.getAuthInstance().signOut();\r\n}\r\n\r\ninterface Events {\r\n    onSignInStatusChanged?: (isSignedIn: boolean) => void;\r\n    onError?: (error: any) => void;\r\n}\r\n\r\nexport const events: Events = {\r\n    onError: alert\r\n}\r\n","import React from 'react';\r\nimport * as brsApi from \"./apis/brsApi\";\r\nimport {TermType} from \"./apis/brsApi\";\r\n\r\nexport function BrsCheck() {\r\n    return (\r\n        <div>\r\n            <input type=\"text\" id={\"login\"} placeholder={\"Login\"}/>\r\n            <input type=\"password\" id={\"password\"} placeholder={\"Password\"}/>\r\n            <input type={\"button\"} value={\"Login\"} onClick={login}/>\r\n            <br/>\r\n            <input type={\"button\"} id={\"loadBrsBtn\"} value={\"Load BRS\"} onClick={loadBrs} disabled={true}/>\r\n            <label id={\"brs-response\"}>Available discipline:</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nasync function login(){\r\n    //@ts-ignore\r\n    const login = document.getElementById('login')?.value;\r\n    //@ts-ignore\r\n    const password = document.getElementById('password')?.value;\r\n    console.log(login, password);\r\n    const loadBrsBtn = document.getElementById('loadBrsBtn');\r\n    if (!login || !password || !loadBrsBtn)\r\n    {\r\n        alert('No data');\r\n        return;\r\n    }\r\n    brsApi.authAsync(login, password)\r\n        .then(sid => {\r\n            alert(sid);\r\n            localStorage.setItem('sid', sid);\r\n            loadBrsBtn.removeAttribute('disabled');\r\n        }, () => alert('Wrong login or password'));\r\n}\r\n\r\nasync function loadBrs() {\r\n    const sid = localStorage.getItem('sid');\r\n    if (!sid) {\r\n        alert('No sid!');\r\n        return;\r\n    }\r\n    brsApi.setSid(sid);\r\n    const disciplines = await brsApi.getDisciplineInternalAsync(\r\n        2019,\r\n        TermType.Fall,\r\n        2,\r\n        false);\r\n    const label = document.getElementById('brs-response');\r\n    if (label)\r\n        label.innerText += disciplines[0].discipline;\r\n}\r\n","import React from 'react';\r\nimport * as auth from './GoogleAuthService';\r\n\r\nlet spreadsheetId = '1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms';\r\nlet sheetName = 'Class data';\r\nlet range = 'A1:F';\r\n\r\nauth.events.onSignInStatusChanged = isSignedIn => {\r\n    const authBtn = document.getElementById('authorize_button');\r\n    const signOutBtn = document.getElementById('signout_button');\r\n    if (!authBtn || !signOutBtn)\r\n        return;\r\n    console.log(`SignIn: ${isSignedIn}`);\r\n    authBtn.style.display = isSignedIn ? \"none\" : \"block\";\r\n    signOutBtn.style.display = isSignedIn ? \"block\" : \"none\";\r\n}\r\n\r\nexport function SpreadsheetForm() {\r\n    return (\r\n        <div className={\"spreadsheet-form\"}>\r\n            <button id=\"init\" onClick={init}>Init</button>\r\n            <button id=\"authorize_button\" onClick={auth.signIn} disabled={true}>Authorize</button>\r\n            <button id=\"signout_button\" onClick={auth.signOut} style={{display: \"none\"}}>Sign Out</button>\r\n            <br/>\r\n            <label>Spreadsheet id </label>\r\n            <input type=\"text\" id={\"sprId\"} defaultValue={spreadsheetId} onBlur={event => spreadsheetId = event.target.value}/>\r\n            <br/>\r\n            <label>Sheet name </label>\r\n            <input type=\"text\" id={\"sheetName\"} defaultValue={sheetName} onBlur={event => sheetName = event.target.value}/>\r\n            <br/>\r\n            <label>Range </label>\r\n            <input type=\"text\" id={\"range\"} defaultValue={range} onBlur={event => range = event.target.value}/>\r\n            <br/>\r\n            <button onClick={listMajors}>Load table</button>\r\n            <button onClick={clearTable}>Clear</button>\r\n            <p className={\"spreadsheet-name\"} id={\"spreadsheet-name\"}>Spreadsheet name</p>\r\n            <div className=\"response-field\" id={\"table\"}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction init() {\r\n    auth.init();\r\n    const authBtn = document.getElementById('authorize_button');\r\n    if (authBtn)\r\n        authBtn.removeAttribute('disabled');\r\n    const initBtn = document.getElementById('init');\r\n    if (initBtn)\r\n        initBtn.style.display = 'none';\r\n}\r\n\r\nfunction appendPre(message: string, table: HTMLElement | null) {\r\n    const row = document.createElement('div');\r\n    row.innerText = message;\r\n    table && table.appendChild(row);\r\n}\r\n\r\nfunction listMajors() {\r\n    // @ts-ignore\r\n    console.log(`Load ${range} from ${sheetName} from ${spreadsheetId}`);\r\n    const table = document.getElementById('table');\r\n    // @ts-ignore\r\n    gapi.client.sheets.spreadsheets.values.get({\r\n        spreadsheetId: spreadsheetId,\r\n        range: `${sheetName}!${range}`,\r\n\r\n    }).then((response: { result: any; }) => {\r\n        const range = response.result;\r\n        if (range.values.length > 0) {\r\n            for (const row of range.values)\r\n                appendPre(row.join(' | '), table);\r\n        } else {\r\n            appendPre('No data found.', table);\r\n        }\r\n    }, (response: { result: { error: { message: string; }; }; }) => {\r\n        alert(response.result.error.message);\r\n    });\r\n}\r\n\r\nfunction clearTable(){\r\n    const table = document.getElementById('table');\r\n    if (table)\r\n        table.innerHTML = \"\";\r\n}\r\n","import React from 'react';\r\nimport {BrsCheck} from \"./BrsCheck\";\r\nimport {SpreadsheetForm} from \"./SpreadsheetForm\";\r\n\r\nfunction App() {\r\n    return (\r\n        <div className={\"wrapper\"}>\r\n            <BrsCheck/>\r\n            <br/>\r\n            <SpreadsheetForm/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}