{"version":3,"sources":["components/SubmitWithLoading.tsx","helpers/cache.ts","apis/brsAuth.ts","apis/brsUrlProvider.ts","components/CustomAlert.tsx","loginPage/GoogleLoginButton.tsx","loginPage/LoginPage.tsx","components/NestedList.tsx","apis/brsApi.ts","helpers/tools.ts","workPage/DisciplinesFetch.tsx","apis/googleApi.ts","helpers/brsHelpers.ts","functions/readStudentsAsync.ts","functions/buildAutoMarksConfigAsync.ts","workPage/SpreadsheetFetch.tsx","workPage/WorkerDialog.tsx","workPage/UnauthorizedAlert.tsx","apis/googleAuth.ts","helpers/fio.ts","functions/DisciplineMarksManager.ts","functions/MarksManager.ts","helpers/logger.ts","workPage/WorkPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["SubmitWithLoading","props","title","loading","className","onClick","disabled","Button","type","fullWidth","variant","color","CircularProgress","size","localCache","save","name","data","json","JSON","stringify","localStorage","setItem","read","localData","content","getItem","fileData","parse","BrsAuth","brsUrlProvider","_sid","_login","this","loadLoginInfo","login","password","getSid","response","headers","cookies","result","match","cache","sid","request","url","baseUrl","method","body","resolveWithFullResponse","simple","then","x","loginInfo","Error","BrsUrlProvider","withProxy","brsUrl","corsProxy","Alert","elevation","CustomAlert","open","message","onClose","Fragment","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","severity","GoogleLoginButton","onSignedIn","onFailure","clientId","buttonText","onSuccess","scope","isSignedIn","brsAuth","LoginPage","credentials","state","brsAuthorized","checkAuth","googleAuthorized","redirect","submitLoading","openAlert","alertMessage","alertType","username","handleFieldChanged","bind","handleBrsSubmit","loginBrs","handleCloseAlert","handleGoogleSignedIn","handleGoogleLoginFailed","startWork","e","field","target","id","value","preventDefault","setState","loginSucceed","authAsync","error","console","to","Container","component","maxWidth","Grid","container","justify","item","md","lg","sm","xs","onSubmit","TextField","margin","required","label","autoFocus","onChange","autoComplete","React","Component","useStyles","makeStyles","theme","createStyles","root","width","backgroundColor","palette","background","default","nested","paddingLeft","spacing","onEmptyMessage","textAlign","NestedListItem","collapsed","useState","setOpen","classes","ListItem","button","ListItemIcon","ListItemText","primary","nestedItems","length","undefined","map","nestedItemTitle","index","Collapse","in","timeout","unmountOnExit","List","disablePadding","NestedList","items","aria-labelledby","subheader","ListSubheader","hidden","StudentFailure","TermType","BrsApi","year","termType","course","isModule","cacheName","cacheResult","getDisciplineInternalAsync","queryString","requestApiJsonAsync","disciplines","paging","discipline","getStudentMarksAsync","students","uniqueStudents","s","knownStudent","studentUuid","Object","keys","k","cardType","markType","getStudentMarksInternalAsync","disciplineLoad","groupHistoryId","groupId","groupUuid","techgroup","isTotal","showActiveStudents","groupPart","getControlActionsCachedAsync","getControlActionsInternalAsync","modulePart","requestApiAsync","prefix","suffix","linesWithId","split","trim","filter","startsWith","columns","substr","uuidPrefix","c","uuid","uuidWithoutPrefix","controlAction","controlActionId","mark","cardTypeKey","disciplineLoadUuid","isNaN","toString","studentFailure","NoFailure","updateMarksAsync","updateMarksInternalAsync","uri","options","trimLeft","normalizeString","str","toLowerCase","replace","compareNormalized","s1","s2","parseAnyFloat","parseFloat","minWidth","marginRight","submit","display","top","marginTop","header","marginBottom","DisciplinesFetch","brsApi","onUnauthorized","openDisciplines","setOpenDisciplines","setLoading","setDisciplines","handleChange","event","checked","a","term","Fall","Spring","getDisciplineCachedAsync","rawDisciplines","convertToListItems","entries","key","reduce","reducer","itemKey","push","d","group","FormControl","InputLabel","Select","MenuItem","FormControlLabel","control","Checkbox","memo","authorizeAsync","getSpreadsheet","spreadsheetId","sheets","gapi","client","range","spreadsheets","values","get","readAsync","writeAsync","asEnteredByUser","valueInputOption","requestBody","update","appendAsync","append","failureMapping","NotChosen","NotAllowedByDeansOffice","NotAppeared","Неуважительная","DisrespectfulReason","Уважительная","RespectfulReason","NotAllowedByTeacher","ShouldNotPass","AcademicLeave","Выбыл","DroppedOut","parseStudentFailure","input","formatStudentFailure","fromSpreadsheetAsync","readRange","fullNameIndex","groupNameIndex","idIndex","failureIndex","googleApi","sheet","rows","row","fullName","groupName","failure","properties","buildAutoMarksConfigAsync","sheetName","isSuitableDiscipline","isSuitableActualStudent","readRowsFromSpreadsheetAsync","getHeader","indices","buildIndicesBy","dataRange","buildDataRange","controlActionConfigs","buildControlActionConfig","disciplineConfig","buildDisciplineConfig","readStudents","fullNameColumn","left","groupColumn","failureColumn","allActualStudents","actualStudents","normalizedHeader","groupColumnIndex","indexOf","fullNameColumnIndex","failureColumnIndex","disciplineParameterKeyColumnIndex","disciplineParameterValueColumnIndex","Math","abs","disciplineKeyColumn","disciplineValueColumn","min","right","leftLetter","String","fromCharCode","charCodeAt","rightLetter","controlActions","propertyIndex","config","sameColumns","matchCount","matchIndex","defaultStudentFailure","i","addDisciplineConfigParameter","parseInt","SpreadsheetFetch","tableUrl","tableUrlError","moduleGroups","loadTable","marksData","groups","Array","from","Set","getSpreadsheetInfo","spreadsheetInfo","onError","moduleGroup","prepareModuleGroup","onDataLoaded","call","res","helperText","DialogContent","withStyles","padding","MuiDialogContent","DialogActions","justifyContent","MuiDialogActions","WorkerDialog","marksManager","okLoading","cancelPending","logItems","cancelWork","logMessage","getLogger","addLogHandler","putMarksToBrsAsync","cancel","Dialog","runWork","dividers","dense","style","minHeight","paddingTop","paddingBottom","onClosed","Transition","forwardRef","ref","Slide","direction","UnauthorizedAlert","setRedirect","TransitionComponent","keepMounted","aria-describedby","DialogTitle","DialogContentText","removeItem","DISCOVERY_DOCS","googleAuth","init","Promise","load","discoveryDocs","onErrorEvent","auth2","getAuthInstance","toKey","fio","DisciplineMarksManager","logger","log","getAllControlActionsCachedAsync","checkControlActionsConfiguration","getAllStudentMarksAsync","brsStudents","mergeStudents","mergedStudents","skippedActualStudents","skippedBrsStudents","logMergedStudents","putMarksForStudentsAsync","updateFailuresForSkippedStudentsAsync","updateAllMarksAsync","getSuitableControlAction","statusCounters","student","putMarksForStudentAsync","status","updated","failed","marks","brsMark","brs","actualMark","actual","putStudentMarkAsync","brsFailureStatus","actualFailure","failureStatus","putStudentFailureAsync","verbose","studentName","join","suitableControlActions","some","b","updateFailureForStudent","statusKeys","studentFio","description","activeBrsStudents","isStudentActive","actualStudent","suitableStudents","brsStudent","brsFullName","actualFullName","areStudentsLike","ms","studentStatus","MarksManager","disciplineMarksManager","getSuitableDisciplinesAsync","putMarksForDisciplineAsync","allDisciplines","Logger","logHandlers","errorHandler","logHandler","errorMessage","WorkPage","showControls","openUnauthorizedAlert","handleDataLoaded","handleClosed","handleUnauthorized","handleError","closeError","handleRunWorkSafe","handleRunWorkUnsafe","addErrorHandler","endsWith","App","path","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.00a4b52c.chunk.js","sourcesContent":["import Button from \"@material-ui/core/Button\";\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport React from \"react\";\r\nimport \"./submitWithLoading.css\";\r\n\r\nexport default function SubmitWithLoading(props: Props) {\r\n    const {title, loading, className, onClick, disabled = false} = props;\r\n\r\n    return (\r\n        <div className={\"submit-with-loading \" + className}>\r\n            <Button type=\"submit\"\r\n                    fullWidth\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={onClick}\r\n                    disabled={loading || disabled}>\r\n                {title}\r\n            </Button>\r\n            {\r\n                loading &&\r\n                <CircularProgress color=\"secondary\" size={24} className=\"button-progress\"/>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Props {\r\n    title: string;\r\n    loading: boolean;\r\n    className?: string;\r\n    onClick?: () => void;\r\n    disabled?: boolean;\r\n}\r\n","const localCache: { [name: string]: object | string } = {};\r\n\r\nexport function save(name: string, data: object | string) {\r\n    if (!data) {\r\n        return false;\r\n    }\r\n\r\n    const json = JSON.stringify(data);\r\n\r\n    localStorage.setItem(name, json);\r\n\r\n    localCache[name] = data;\r\n\r\n    return true;\r\n}\r\n\r\nexport function read<T extends object | string>(name: string) {\r\n    const localData = localCache[name];\r\n    if (localData) {\r\n        return localData as T;\r\n    }\r\n\r\n    const content = localStorage.getItem(name);\r\n    if (!content) {\r\n        return null;\r\n    }\r\n\r\n    const fileData = JSON.parse(content);\r\n    if (!fileData) {\r\n        return null;\r\n    }\r\n\r\n    localCache[name] = fileData;\r\n    return fileData as T;\r\n}\r\n\r\nexport function clear(name: string) {\r\n    localStorage.removeItem(name);\r\n\r\n    delete localCache[name];\r\n\r\n    return true;\r\n}\r\n","import request from \"request-promise\";\r\nimport BrsUrlProvider from \"./brsUrlProvider\";\r\nimport * as cache from \"../helpers/cache\";\r\n\r\nexport default class BrsAuth {\r\n    private brsUrlProvider: BrsUrlProvider;\r\n\r\n    constructor(brsUrlProvider: BrsUrlProvider) {\r\n        this.brsUrlProvider = brsUrlProvider;\r\n    }\r\n\r\n    private _sid: string | null = null;\r\n\r\n    get sid() {\r\n        if (!this._sid)\r\n            this.loadLoginInfo();\r\n        return this._sid;\r\n    }\r\n\r\n    private _login: string | null = null;\r\n\r\n    get login() {\r\n        if (!this._login)\r\n            this.loadLoginInfo();\r\n        return this._login;\r\n    }\r\n\r\n    checkAuth() {\r\n        try {\r\n            this.loadLoginInfo();\r\n            return true;\r\n        } catch {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    async authAsync(login: string, password: string): Promise<boolean> {\r\n        const response = await this.getSid(login, password);\r\n\r\n        if (!response || !('x-set-cookie' in response.headers)) {\r\n            return false;\r\n        }\r\n\r\n        const cookies = response.headers['x-set-cookie'] as string;\r\n        const result = cookies.match(/(?<=JSESSIONID=)\\w+/);\r\n\r\n        if (!result)\r\n            return false;\r\n\r\n        cache.save('loginInfo', {sid: result[0], login});\r\n\r\n        return true;\r\n    }\r\n\r\n    async getSid(login: string, password: string) {\r\n        return await request({\r\n            url: this.brsUrlProvider.baseUrl + `/login`,\r\n            method: 'POST',\r\n            body: `username=${login}&password=${password}`,\r\n            resolveWithFullResponse: true,\r\n            simple: false,\r\n            headers: {\r\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n            },\r\n        }).then(x => x, () => null);\r\n    }\r\n\r\n    private loadLoginInfo() {\r\n        const loginInfo = cache.read<{ sid: string, login: string }>('loginInfo');\r\n        if (!loginInfo)\r\n            throw new Error('BrsAuth unauthorized');\r\n        this._sid = loginInfo.sid;\r\n        this._login = loginInfo.login;\r\n    }\r\n}\r\n","export default class BrsUrlProvider {\r\n    private readonly withProxy: boolean;\r\n    private readonly brsUrl = 'https://brs.urfu.ru/mrd';\r\n    private readonly corsProxy = 'https://kamikoto-cors-proxy.herokuapp.com';\r\n\r\n    constructor(withProxy: boolean) {\r\n        this.withProxy = withProxy;\r\n    }\r\n\r\n    get baseUrl() {\r\n        return this.withProxy ?\r\n            `${this.corsProxy}/${this.brsUrl}` :\r\n            this.brsUrl;\r\n    }\r\n}\r\n","import React from \"react\";\r\nimport MuiAlert, {AlertProps} from '@material-ui/lab/Alert';\r\nimport {Snackbar} from \"@material-ui/core\";\r\n\r\nfunction Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n\r\nexport default function CustomAlert(props: Props) {\r\n    const {open, message, type, onClose} = props;\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <Snackbar\r\n                open={open}\r\n                autoHideDuration={10000}\r\n                anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n                onClose={onClose}>\r\n                <Alert severity={type} onClose={onClose}>\r\n                    {message}\r\n                </Alert>\r\n            </Snackbar>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    open: boolean;\r\n    message: string;\r\n    type: \"error\" | \"success\";\r\n    onClose: () => void;\r\n}\r\n","import GoogleLogin from \"react-google-login\";\r\nimport React from \"react\";\r\n\r\nconst CLIENT_ID = '122993083593-pacve8csj86voko30ia65raeg0ncrtuv.apps.googleusercontent.com';\r\nconst SCOPES = \"profile email https://www.googleapis.com/auth/spreadsheets\";\r\n\r\nexport default function GoogleLoginButton(props: Props) {\r\n    const {onSignedIn, onFailure} = props;\r\n\r\n    return (\r\n        <GoogleLogin\r\n            clientId={CLIENT_ID}\r\n            buttonText=\"Войти в аккаунт Google\"\r\n            onSuccess={onSignedIn}\r\n            onFailure={onFailure}\r\n            scope={SCOPES}\r\n            isSignedIn={true}\r\n        />\r\n    );\r\n}\r\n\r\ninterface Props {\r\n    onSignedIn: () => void;\r\n    onFailure: (error: any) => void;\r\n}\r\n","import React, {FormEvent} from 'react';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport {Redirect} from 'react-router-dom';\r\nimport SubmitWithLoading from \"../components/SubmitWithLoading\";\r\nimport BrsAuth from \"../apis/brsAuth\";\r\nimport BrsUrlProvider from \"../apis/brsUrlProvider\";\r\nimport CustomAlert from \"../components/CustomAlert\";\r\nimport {Grid} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport \"./login-page.css\";\r\nimport GoogleLoginButton from \"./GoogleLoginButton\";\r\n\r\nconst brsAuth = new BrsAuth(new BrsUrlProvider(true));\r\n\r\nexport default class LoginPage extends React.Component<{}, State> {\r\n    credentials: Credentials;\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            brsAuthorized: brsAuth.checkAuth(),\r\n            googleAuthorized: false,\r\n            redirect: false,\r\n            submitLoading: false,\r\n            openAlert: false,\r\n            alertMessage: '',\r\n            alertType: 'error'\r\n        }\r\n\r\n        this.credentials = {\r\n            username: '',\r\n            password: ''\r\n        }\r\n\r\n        this.handleFieldChanged = this.handleFieldChanged.bind(this);\r\n        this.handleBrsSubmit = this.handleBrsSubmit.bind(this);\r\n        this.loginBrs = this.loginBrs.bind(this);\r\n        this.handleCloseAlert = this.handleCloseAlert.bind(this);\r\n        this.handleGoogleSignedIn = this.handleGoogleSignedIn.bind(this);\r\n        this.handleGoogleLoginFailed = this.handleGoogleLoginFailed.bind(this);\r\n        this.startWork = this.startWork.bind(this);\r\n    }\r\n\r\n    handleFieldChanged(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const field = e.target\r\n        this.credentials[field.id] = field.value\r\n    }\r\n\r\n    async handleBrsSubmit(e: FormEvent) {\r\n        e.preventDefault();\r\n        this.setState({submitLoading: true});\r\n\r\n        const loginSucceed = await this.loginBrs();\r\n\r\n        this.setState({submitLoading: false})\r\n\r\n        if (loginSucceed) {\r\n            this.setState({\r\n                alertMessage: 'Авторизация прошла успешно',\r\n                openAlert: true,\r\n                alertType: 'success',\r\n                brsAuthorized: true\r\n            });\r\n        } else\r\n            this.setState({\r\n                alertMessage: 'Неверные имя пользователя или пароль',\r\n                openAlert: true,\r\n                alertType: 'error'\r\n            });\r\n    }\r\n\r\n    async loginBrs() {\r\n        return await brsAuth.authAsync(this.credentials.username, this.credentials.password);\r\n    }\r\n\r\n    handleCloseAlert() {\r\n        this.setState({openAlert: false});\r\n    }\r\n\r\n    handleGoogleSignedIn() {\r\n        this.setState({googleAuthorized: true});\r\n    }\r\n\r\n    handleGoogleLoginFailed(error: any) {\r\n        console.error(error);\r\n\r\n        this.setState({\r\n            openAlert: true,\r\n            alertType: 'error',\r\n            alertMessage: 'Не удалось подключить Ваш Google аккаунт :('\r\n        });\r\n    }\r\n\r\n    startWork() {\r\n        this.setState({redirect: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-page\">\r\n                {this.state.redirect && <Redirect to=\"/brs-extensions/work\"/>}\r\n                <Container component=\"main\" maxWidth=\"md\">\r\n                    <h1>Привет!</h1>\r\n                    <h3>Как все работает</h3>\r\n                    <p>Как-то все работает</p>\r\n                    <h3>Правила хранения данных</h3>\r\n                    <p>Данные хранятся в localstorage</p>\r\n                    <hr/>\r\n                    <p>Для начала работы, необходимо авторизоваться в БРС</p>\r\n                    <Grid container justify=\"space-around\">\r\n                        <Grid item md={5} lg={5} sm={5} xs={10}>\r\n                            <form className=\"form\" onSubmit={this.handleBrsSubmit}>\r\n                                <TextField\r\n                                    variant=\"outlined\"\r\n                                    margin=\"normal\"\r\n                                    required\r\n                                    fullWidth\r\n                                    id=\"username\"\r\n                                    label=\"Имя пользователя\"\r\n                                    name=\"username\"\r\n                                    autoFocus\r\n                                    onChange={this.handleFieldChanged}\r\n                                />\r\n                                <TextField variant=\"outlined\"\r\n                                           margin=\"normal\"\r\n                                           required\r\n                                           fullWidth\r\n                                           name=\"password\"\r\n                                           label=\"Пароль\"\r\n                                           type=\"password\"\r\n                                           id=\"password\"\r\n                                           autoComplete=\"current-password\"\r\n                                           onChange={this.handleFieldChanged}/>\r\n                                <SubmitWithLoading title=\"войти\" loading={this.state.submitLoading}/>\r\n                            </form>\r\n                        </Grid>\r\n                        <Grid item className=\"align-center\">\r\n                            <h3>А также</h3>\r\n                        </Grid>\r\n                        <Grid item className=\"align-center\">\r\n                            <GoogleLoginButton onSignedIn={this.handleGoogleSignedIn}\r\n                                               onFailure={this.handleGoogleLoginFailed}/>\r\n                            <br/>\r\n                        </Grid>\r\n                    </Grid>\r\n                    <Container className=\"start-work-wrapper\">\r\n                        <Button variant=\"contained\"\r\n                                onClick={this.startWork}\r\n                                disabled={!this.state.brsAuthorized || !this.state.googleAuthorized}\r\n                                color=\"secondary\">начать работу</Button>\r\n                    </Container>\r\n                    <CustomAlert open={this.state.openAlert}\r\n                                 message={this.state.alertMessage}\r\n                                 type={this.state.alertType}\r\n                                 onClose={this.handleCloseAlert}/>\r\n                </Container>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\ninterface Credentials {\r\n    username: string\r\n    password: string\r\n\r\n    [props: string]: string\r\n}\r\n\r\ninterface State {\r\n    brsAuthorized: boolean;\r\n    googleAuthorized: boolean;\r\n    submitLoading: boolean;\r\n    redirect: boolean;\r\n    openAlert: boolean,\r\n    alertMessage: string,\r\n    alertType: \"error\" | \"success\";\r\n}\r\n","import React from 'react';\r\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport ViewModuleIcon from '@material-ui/icons/ViewModule';\r\n\r\nconst useStyles = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            width: '100%',\r\n            backgroundColor: theme.palette.background.default,\r\n        },\r\n        nested: {\r\n            paddingLeft: theme.spacing(4),\r\n        },\r\n        onEmptyMessage: {\r\n            textAlign: \"center\"\r\n        }\r\n    }),\r\n);\r\n\r\nfunction NestedListItem(props: NestedListItemProps) {\r\n    const {item, collapsed} = props;\r\n    const [open, setOpen] = React.useState(!collapsed);\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <ListItem button onClick={() => setOpen(!open)}>\r\n                <ListItemIcon>\r\n                    <ViewModuleIcon/>\r\n                </ListItemIcon>\r\n                <ListItemText primary={item.title}/>\r\n                {item.nestedItems?.length && (open ? <ExpandLess/> : <ExpandMore/>) || undefined}\r\n            </ListItem>\r\n            {\r\n                item.nestedItems?.length &&\r\n                item.nestedItems.map((nestedItemTitle, index) => (\r\n                    <Collapse key={index} in={open} timeout=\"auto\" unmountOnExit>\r\n                        <List component=\"div\" className={classes.nested} disablePadding>\r\n                            <ListItem button>\r\n                                <ListItemIcon>\r\n                                    <GroupIcon/>\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={nestedItemTitle}/>\r\n                            </ListItem>\r\n                        </List>\r\n                    </Collapse>\r\n                ))\r\n                || undefined\r\n            }\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default function NestedList(props: NestedListProps) {\r\n    const {title, items, collapsed = true} = props;\r\n    const classes = useStyles();\r\n    return (\r\n        <List\r\n            component=\"nav\"\r\n            aria-labelledby=\"nested-list-subheader\"\r\n            subheader={\r\n                <ListSubheader component=\"div\" id=\"nested-list-subheader\" hidden={!title}>\r\n                    {title}\r\n                </ListSubheader>\r\n            }\r\n            className={classes.root}>\r\n            {\r\n                items.length ?\r\n                    items.map((item, index) => (\r\n                        <NestedListItem key={index}\r\n                                        item={item}\r\n                                        collapsed={collapsed}/>\r\n                    )) :\r\n                    <ListItem className={classes.onEmptyMessage}>\r\n                        <ListItemText primary=\"No items\"/>\r\n                    </ListItem>\r\n            }\r\n        </List>\r\n    );\r\n}\r\n\r\nexport interface NestedListItem {\r\n    title: string,\r\n    nestedItems?: string[]\r\n}\r\n\r\ninterface NestedListProps {\r\n    title?: string;\r\n    items: NestedListItem[];\r\n    collapsed?: boolean;\r\n}\r\n\r\ninterface NestedListItemProps {\r\n    item: { title: string, nestedItems?: string[] };\r\n    collapsed?: boolean;\r\n}\r\n","import 'bluebird';\r\nimport request from 'request-promise';\r\nimport * as cache from '../helpers/cache';\r\nimport BrsAuth from \"./brsAuth\";\r\nimport BrsUrlProvider from \"./brsUrlProvider\";\r\n\r\nexport enum StudentFailure {\r\n    /** -, дефис, все хорошо */ NoFailure = -1,\r\n    /** Не выбрана */ NotChosen = -19,\r\n    /** Не допущен (деканат) */ NotAllowedByDeansOffice = -18,\r\n    /** Не явился */ NotAppeared = 0,\r\n    /** Неуважительная */ DisrespectfulReason = 12,\r\n    /** Уважительная */ RespectfulReason = 13,\r\n    /** Не допущен */ NotAllowedByTeacher = 18,\r\n    /** Не должен сдавать */ ShouldNotPass = 19,\r\n    /** Академический отпуск */ AcademicLeave = 20,\r\n    /** Выбыл */ DroppedOut = 21,\r\n}\r\n\r\nexport enum TermType {\r\n    Fall = 1,\r\n    Spring = 2,\r\n}\r\n\r\nexport default class BrsApi {\r\n    private readonly brsAuth: BrsAuth;\r\n    private readonly brsUrlProvider: BrsUrlProvider;\r\n\r\n    constructor(brsAuth: BrsAuth, brsUrlProvider: BrsUrlProvider) {\r\n        this.brsAuth = brsAuth;\r\n        this.brsUrlProvider = brsUrlProvider;\r\n    }\r\n\r\n    async getDisciplineCachedAsync(\r\n        year: number,\r\n        termType: TermType,\r\n        course: number,\r\n        isModule: boolean\r\n    ) {\r\n        const cacheName = `${this.brsAuth.login}_getDiscipline_${year}_${termType}_${course}_${isModule}`;\r\n        const cacheResult = cache.read<Discipline[]>(cacheName);\r\n        if (cacheResult) {\r\n            return cacheResult;\r\n        }\r\n\r\n        const result = await this.getDisciplineInternalAsync(\r\n            year,\r\n            termType,\r\n            course,\r\n            isModule\r\n        );\r\n        cache.save(cacheName, result);\r\n        return result;\r\n    }\r\n\r\n    async getDisciplineInternalAsync(\r\n        year: number,\r\n        termType: TermType,\r\n        course: number,\r\n        isModule: boolean\r\n    ) {\r\n        const queryString = `?year=${year}&termType=${termType}&course=${course}&total=0&page=1&pageSize=1000&search=`;\r\n        if (isModule) {\r\n            const disciplines = await this.requestApiJsonAsync<Discipline[]>(\r\n                '/mvc/mobile/module/fetch' + queryString\r\n            );\r\n            for (const d of disciplines) {\r\n                d.isModule = true;\r\n            }\r\n            return disciplines;\r\n        } else {\r\n            const paging = await this.requestApiJsonAsync<Paging<Discipline>>(\r\n                '/mvc/mobile/discipline/fetch' + queryString\r\n            );\r\n            const disciplines = paging.content;\r\n            for (const d of disciplines) {\r\n                d.isModule = false;\r\n            }\r\n            return disciplines;\r\n        }\r\n    }\r\n\r\n    async getAllStudentMarksAsync(discipline: Discipline) {\r\n        const students = [\r\n            ...(await this.getStudentMarksAsync(discipline, 'lecture', 'current')),\r\n            ...(await this.getStudentMarksAsync(discipline, 'lecture', 'intermediate')),\r\n            ...(await this.getStudentMarksAsync(discipline, 'laboratory', 'current')),\r\n            ...(await this.getStudentMarksAsync(discipline, 'laboratory', 'intermediate')),\r\n        ];\r\n\r\n        const uniqueStudents: { [id: string]: StudentMark } = {};\r\n        for (const s of students) {\r\n            const knownStudent = uniqueStudents[s.studentUuid] || {};\r\n            uniqueStudents[s.studentUuid] = {...knownStudent, ...s};\r\n        }\r\n\r\n        return Object.keys(uniqueStudents).map(k => uniqueStudents[k]);\r\n    }\r\n\r\n    async getStudentMarksAsync(\r\n        discipline: Discipline,\r\n        cardType: CardType,\r\n        markType: MarkType\r\n    ) {\r\n        return this.getStudentMarksInternalAsync(\r\n            discipline.disciplineLoad,\r\n            discipline.isModule,\r\n            discipline.groupHistoryId,\r\n            discipline.groupId,\r\n            cardType,\r\n            markType\r\n        );\r\n    }\r\n\r\n    async getStudentMarksInternalAsync(\r\n        disciplineLoad: string,\r\n        isModule: boolean,\r\n        groupUuid: string,\r\n        techgroup: string,\r\n        cardType: CardType,\r\n        markType: MarkType,\r\n        isTotal: boolean = false,\r\n        showActiveStudents: boolean = false\r\n    ) {\r\n        const groupPart = isModule\r\n            ? `techgroup=${techgroup}`\r\n            : `groupUuid=${groupUuid}`;\r\n        return this.requestApiJsonAsync<StudentMark[]>(\r\n            `/mvc/mobile/studentMarks/fetch?disciplineLoad=${disciplineLoad}&${groupPart}` +\r\n            `&cardType=${cardType}&hasTest=false&isTotal=${isTotal}` +\r\n            `&intermediate=${markType === 'intermediate'}` +\r\n            `&selectedTeachers=null&showActiveStudents=${showActiveStudents}`\r\n        );\r\n    }\r\n\r\n    async getAllControlActionsCachedAsync(discipline: Discipline) {\r\n        return [\r\n            ...(await this.getControlActionsCachedAsync(discipline, 'lecture', 'current')),\r\n            ...(await this.getControlActionsCachedAsync(\r\n                discipline,\r\n                'lecture',\r\n                'intermediate'\r\n            )),\r\n            ...(await this.getControlActionsCachedAsync(\r\n                discipline,\r\n                'laboratory',\r\n                'current'\r\n            )),\r\n            ...(await this.getControlActionsCachedAsync(\r\n                discipline,\r\n                'laboratory',\r\n                'intermediate'\r\n            )),\r\n            ...(await this.getControlActionsCachedAsync(discipline, 'practice', 'current')),\r\n            ...(await this.getControlActionsCachedAsync(\r\n                discipline,\r\n                'practice',\r\n                'intermediate'\r\n            )),\r\n            ...(await this.getControlActionsCachedAsync(\r\n                discipline,\r\n                'additionalPractice',\r\n                'current'\r\n            )),\r\n            ...(await this.getControlActionsCachedAsync(\r\n                discipline,\r\n                'additionalPractice',\r\n                'intermediate'\r\n            )),\r\n        ];\r\n    }\r\n\r\n    async getControlActionsCachedAsync(\r\n        discipline: Discipline,\r\n        cardType: CardType,\r\n        markType: MarkType\r\n    ) {\r\n        const cacheName = `${this.brsAuth.login}_getControlActions_${discipline.disciplineLoad}` +\r\n            `_${discipline.isModule}_${discipline.groupHistoryId}_${discipline.groupId}_${cardType}_${markType}`;\r\n        const cacheResult = cache.read<ControlAction[]>(cacheName);\r\n        if (cacheResult) {\r\n            return cacheResult;\r\n        }\r\n\r\n        const result = await this.getControlActionsInternalAsync(\r\n            discipline.disciplineLoad,\r\n            discipline.isModule,\r\n            discipline.groupHistoryId,\r\n            discipline.groupId,\r\n            cardType,\r\n            markType\r\n        );\r\n        cache.save(cacheName, result);\r\n        return result;\r\n    }\r\n\r\n    async getControlActionsInternalAsync(\r\n        disciplineLoad: string,\r\n        isModule: boolean,\r\n        groupUuid: string,\r\n        techgroup: string,\r\n        cardType: CardType,\r\n        markType: MarkType\r\n    ) {\r\n        const modulePart = isModule ? '/module' : '';\r\n        const groupPart = isModule ? techgroup : groupUuid;\r\n        const response = await this.requestApiAsync<string>(\r\n            `/mvc/mobile/view/mark/${disciplineLoad}/${groupPart}/teachers${modulePart}/${cardType}/${markType}`\r\n        );\r\n\r\n        const prefix = 'gridColumns = toTextArray(';\r\n        const suffix = ');';\r\n        const linesWithId = response\r\n            .split('\\r\\n')\r\n            .map(s => s.trim())\r\n            .filter(s => s.startsWith(prefix));\r\n        if (linesWithId.length !== 1) {\r\n            throw new Error(\r\n                'Control actions page should contain single line target line with techcard identifier'\r\n            );\r\n        }\r\n\r\n        const columns: Array<{ controlAction: string; uuid: string }> =\r\n            JSON.parse(\r\n                linesWithId[0].substr(\r\n                    prefix.length,\r\n                    linesWithId[0].length - prefix.length - suffix.length\r\n                )\r\n            ) || [];\r\n\r\n        const uuidPrefix = 'technologyCard';\r\n        const result = columns\r\n            .filter(c => c.uuid && c.uuid.startsWith(uuidPrefix))\r\n            .map(c => ({\r\n                uuid: c.uuid,\r\n                uuidWithoutPrefix: c.uuid.substr(uuidPrefix.length),\r\n                controlAction: c.controlAction,\r\n            }));\r\n        return result as ControlAction[];\r\n    }\r\n\r\n    async putStudentMarkAsync(\r\n        studentUuid: string,\r\n        controlActionId: string,\r\n        mark: number,\r\n        groupId: string,\r\n        cardTypeKey: CardType,\r\n        disciplineLoadUuid: string\r\n    ) {\r\n        const body = `student=${studentUuid}&techcard=${controlActionId}&mark=${\r\n            isNaN(mark) ? '' : mark.toString()\r\n        }&groupId=${groupId}&cardTypeKey=${cardTypeKey}&disciplineLoadUuid=${disciplineLoadUuid}`;\r\n        return this.requestApiJsonAsync<StudentMark>(\r\n            `/mvc/mobile/studentMarks/put`,\r\n            {\r\n                method: 'POST',\r\n                body,\r\n                json: false,\r\n            },\r\n            {\r\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n            }\r\n        );\r\n    }\r\n\r\n    async putStudentFailureAsync(\r\n        studentUuid: string,\r\n        discipline: Discipline,\r\n        studentFailure: StudentFailure = StudentFailure.NoFailure,\r\n        cardType: CardType = 'lecture'\r\n    ) {\r\n        const body = `markFailure=${studentFailure}&cardType=${cardType}&disciplineLoad=${discipline.disciplineLoad}&studentId=${studentUuid}`;\r\n        await this.requestApiAsync(\r\n            `/mvc/mobile/failure/update`,\r\n            {\r\n                method: 'POST',\r\n                body,\r\n                json: false,\r\n            },\r\n            {\r\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n            }\r\n        );\r\n    }\r\n\r\n    async updateAllMarksAsync(discipline: Discipline) {\r\n        // Одного вызова достаточно, чтобы обновить все оценки по предмету у группы.\r\n        await this.updateMarksAsync(discipline, 'lecture', 'intermediate');\r\n        // await updateMarksAsync(discipline, 'lecture', 'current');\r\n        // await updateMarksAsync(discipline, 'lecture', 'intermediate');\r\n        // await updateMarksAsync(discipline, 'laboratory', 'current');\r\n        // await updateMarksAsync(discipline, 'laboratory', 'intermediate');\r\n        // await updateMarksAsync(discipline, 'practice', 'current');\r\n        // await updateMarksAsync(discipline, 'practice', 'intermediate');\r\n    }\r\n\r\n    async updateMarksAsync(\r\n        discipline: Discipline,\r\n        cardType: CardType,\r\n        markType: MarkType\r\n    ) {\r\n        return this.updateMarksInternalAsync(\r\n            discipline.disciplineLoad,\r\n            discipline.isModule,\r\n            discipline.groupHistoryId,\r\n            discipline.groupId,\r\n            cardType,\r\n            markType\r\n        );\r\n    }\r\n\r\n    async updateMarksInternalAsync(\r\n        disciplineLoad: string,\r\n        isModule: boolean,\r\n        groupUuid: string,\r\n        techgroup: string,\r\n        cardType: CardType,\r\n        markType: MarkType\r\n    ) {\r\n        const modulePart = isModule ? '/module' : '';\r\n        const groupPart = isModule\r\n            ? `techgroup=${techgroup}`\r\n            : `groupUuid=${groupUuid}`;\r\n        const body =\r\n            `disciplineLoad=${disciplineLoad}&${groupPart}` +\r\n            `&cardType=${cardType}&hasTest=false&isTotal=false` +\r\n            `&intermediate=${markType === 'intermediate'}` +\r\n            `&selectedTeachers=null&showActiveStudents=true`;\r\n        return this.requestApiAsync<string>(\r\n            `/mvc/mobile/updateMarks${modulePart}`,\r\n            {\r\n                method: 'POST',\r\n                body,\r\n                json: false,\r\n            },\r\n            {\r\n                'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n            }\r\n        );\r\n    }\r\n\r\n    async requestApiJsonAsync<T>(\r\n        uri: string,\r\n        options?: RequestOptions,\r\n        headers?: RequestHeaders\r\n    ): Promise<T> {\r\n        const response = await this.requestApiAsync<string>(uri, options, headers);\r\n\r\n        return JSON.parse(response);\r\n    }\r\n\r\n    async requestApiAsync<T>(\r\n        uri: string,\r\n        options?: RequestOptions,\r\n        headers?: RequestHeaders\r\n    ): Promise<T> {\r\n        const response = await request({\r\n            method: 'GET',\r\n            ...options,\r\n            url: this.brsUrlProvider.baseUrl + uri,\r\n            headers: {\r\n                'X-Cookie': `JSESSIONID=${this.brsAuth.sid}`,\r\n                'X-Requested-With': 'XMLHttpRequest',\r\n                ...headers,\r\n            },\r\n        });\r\n\r\n        if (response.trimLeft().startsWith('<!DOCTYPE html>')) {\r\n            throw new Error(uri + ' is Forbidden');\r\n        }\r\n\r\n        return response;\r\n    }\r\n}\r\n\r\n\r\ninterface RequestOptions {\r\n    method?: string;\r\n    body?: object | string;\r\n    json?: boolean;\r\n}\r\n\r\ninterface RequestHeaders {\r\n    'Content-Type'?: string;\r\n}\r\n\r\nexport type CardType = 'lecture' | 'laboratory' | 'practice' | 'additionalPractice';\r\nexport type MarkType = 'intermediate' | 'current';\r\n\r\ninterface Paging<T> {\r\n    content: T[];\r\n    last: boolean;\r\n    totalPages: number;\r\n    totalElements: number;\r\n    size: number;\r\n    number: number;\r\n    sort: any;\r\n    first: boolean;\r\n    numberOfElements: number;\r\n}\r\n\r\nexport interface RegisterInfo {\r\n    registerInfoStr: string;\r\n    registerId: number;\r\n    passDate: any;\r\n    cardType: string;\r\n    sheet: string;\r\n}\r\n\r\nexport interface Discipline {\r\n    groupId: string;\r\n    discipline: string;\r\n    group: string;\r\n    registerInfo: RegisterInfo[];\r\n    disciplineLoad: string;\r\n    groupHistoryId: string;\r\n    isModule: boolean;\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst studentMarkSample: StudentMark = {\r\n    studentPersonalNumber: '09800106',\r\n    isEdit: false,\r\n    studentUuid:\r\n        'studen18hc2jg0000magk6mi3iec84bsundigr18hc2jg0000m53o7mlgvora278',\r\n    status: 1,\r\n    studentStatus: 'Активный',\r\n    ignoreCurrentDebars: false,\r\n    studentFio: 'Анисимова Маргарита Васильевна',\r\n    isExtern: false,\r\n    teacherName: '',\r\n    cardType: 'lecture',\r\n    studentName: 'Анисимова М.В.',\r\n    studentGroup: 'РИ-180001',\r\n    registerClosed: false,\r\n    subgroupsITS: '',\r\n    disciplineLoad: 'unpldd18hc2jg0000m5kojcd3te76bnk',\r\n};\r\n\r\nexport interface StudentMark {\r\n    studentPersonalNumber: string;\r\n    isEdit: boolean;\r\n    studentUuid: string;\r\n    status: number;\r\n    studentStatus: string;\r\n    ignoreCurrentDebars: boolean;\r\n    studentFio: string;\r\n    isExtern: boolean;\r\n    teacherName: string;\r\n    cardType: CardType;\r\n    studentName: string;\r\n    studentGroup: string;\r\n    registerClosed: boolean;\r\n    subgroupsITS: string;\r\n    disciplineLoad: string;\r\n    failure?: StudentFailure;\r\n    failureName?: string;\r\n\r\n    [props: string]: number | string | boolean | undefined;\r\n}\r\n\r\nexport interface ControlAction {\r\n    uuid: string;\r\n    uuidWithoutPrefix: string;\r\n    controlAction: string;\r\n}\r\n","export function fixSpaces(str: string) {\r\n    return str && str.replace(/[\\s]/g, ' ');\r\n}\r\n\r\nexport function normalizeString(str: string) {\r\n    return (\r\n        str &&\r\n        str\r\n            .toLowerCase()\r\n            .replace('ё', 'е')\r\n            .replace(/[^A-Za-zА-ЯЁа-яё0-9]/g, '')\r\n    );\r\n}\r\n\r\nexport function compareNormalized(s1: string, s2: string) {\r\n    return normalizeString(s1) === normalizeString(s2);\r\n}\r\n\r\nexport function parseAnyFloat(s: string) {\r\n    return parseFloat(s && s.replace(',', '.'));\r\n}\r\n\r\nexport function groupBy<TItem, TKey>(items: TItem[], key: keyof TItem) {\r\n    const reducer: { [group: string]: TItem[] } = {};\r\n    return items.reduce((reducer, item) => {\r\n        const itemKey = `${item[key]}`;\r\n        (reducer[itemKey] = reducer[itemKey] || []).push(item);\r\n        return reducer;\r\n    }, reducer);\r\n}\r\n","import TextField from \"@material-ui/core/TextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Select from \"@material-ui/core/Select\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport SubmitWithLoading from \"../components/SubmitWithLoading\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport NestedList from \"../components/NestedList\";\r\nimport React, {FormEvent, memo} from \"react\";\r\nimport {createStyles, makeStyles} from \"@material-ui/core\";\r\nimport BrsApi, {Discipline, TermType} from \"../apis/brsApi\";\r\nimport {groupBy} from \"../helpers/tools\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\n\r\nconst useStyles = makeStyles(() =>\r\n    createStyles({\r\n        termType: {\r\n            minWidth: 100,\r\n            marginRight: 10\r\n        },\r\n        year: {\r\n            width: 60,\r\n            marginRight: 10\r\n        },\r\n        course: {\r\n            width: 50,\r\n            marginRight: 10\r\n        },\r\n        submit: {\r\n            display: 'inline-block',\r\n            top: 5\r\n        },\r\n        isModule: {\r\n            marginTop: 15\r\n        },\r\n        header: {\r\n            marginBottom: 10\r\n        }\r\n    }),\r\n);\r\n\r\nfunction DisciplinesFetch(props: Props) {\r\n    const classes = useStyles();\r\n    const {brsApi, onUnauthorized} = props;\r\n\r\n    let year = 0;\r\n    let termType: 'Осенний' | 'Весенний' = 'Осенний';\r\n    let course = 0;\r\n    let isModule = false;\r\n    const [openDisciplines, setOpenDisciplines] = React.useState(false);\r\n    const [loading, setLoading] = React.useState(false);\r\n\r\n    let disciplinesEmpty: { title: string, nestedItems: string[] }[] = [];\r\n    const [disciplines, setDisciplines] = React.useState(disciplinesEmpty);\r\n\r\n    function handleChange(event: React.ChangeEvent<{ name?: string | undefined, value: unknown }>) {\r\n        const target = event.target;\r\n        switch (target.name) {\r\n            case 'year':\r\n                year = target.value as number;\r\n                break;\r\n            case 'term-type':\r\n                termType = target.value as ('Осенний' | 'Весенний');\r\n                break;\r\n            case 'course':\r\n                course = target.value as number;\r\n                break;\r\n            case 'is-module':\r\n                // @ts-ignore\r\n                isModule = target.checked as boolean;\r\n                break;\r\n        }\r\n    }\r\n\r\n    async function loadDisciplines(e: FormEvent) {\r\n        e.preventDefault();\r\n        setLoading(true);\r\n\r\n        const term = termType === 'Осенний' ? TermType.Fall : TermType.Spring;\r\n\r\n        let rawDisciplines;\r\n        try {\r\n            rawDisciplines = await brsApi.getDisciplineCachedAsync(year, term, course, isModule);\r\n        } catch (e) {\r\n            onUnauthorized();\r\n            setLoading(false);\r\n            return;\r\n        }\r\n\r\n        setDisciplines(convertToListItems(rawDisciplines));\r\n        setLoading(false);\r\n        setOpenDisciplines(true);\r\n    }\r\n\r\n    function convertToListItems(disciplines: Discipline[]) {\r\n        return Object\r\n            .entries(groupBy(disciplines, 'discipline'))\r\n            .map(d => ({\r\n                title: d[0],\r\n                nestedItems: d[1].map(x => x.group)\r\n            }));\r\n    }\r\n\r\n    return (\r\n        <React.Fragment>\r\n            <h3 className={classes.header}>Выбери параметры курса в БРС</h3>\r\n            <form onSubmit={loadDisciplines}>\r\n                <TextField name=\"year\"\r\n                           className={classes.year}\r\n                           label=\"Год\"\r\n                           type=\"number\"\r\n                           onChange={handleChange}\r\n                           required/>\r\n                <FormControl className={classes.termType} required>\r\n                    <InputLabel id=\"term-label\">Семестр</InputLabel>\r\n                    <Select name=\"term-type\"\r\n                            onChange={handleChange}>\r\n                        <MenuItem value=\"Осенний\">Осенний</MenuItem>\r\n                        <MenuItem value=\"Весенний\">Весенний</MenuItem>\r\n                    </Select>\r\n                </FormControl>\r\n                <TextField name=\"course\"\r\n                           className={classes.course}\r\n                           label=\"Курс\"\r\n                           type=\"number\"\r\n                           onChange={handleChange}\r\n                           required/>\r\n                <FormControlLabel label=\"Модуль\"\r\n                                  className={classes.isModule}\r\n                                  control={<Checkbox name=\"is-module\"\r\n                                                     color=\"primary\"\r\n                                                     onChange={handleChange}/>}/>\r\n                <SubmitWithLoading title=\"вывести\" loading={loading} className={classes.submit}/>\r\n            </form>\r\n            <br/>\r\n            <Collapse in={openDisciplines}>\r\n                <NestedList title=\"Доступные дисциплины\" items={disciplines}/>\r\n            </Collapse>\r\n        </React.Fragment>\r\n    );\r\n}\r\n\r\nexport default memo(DisciplinesFetch);\r\n\r\ninterface Props {\r\n    brsApi: BrsApi;\r\n    onUnauthorized: () => void;\r\n}\r\n","export async function authorizeAsync() {\r\n    // globalAuth = await googleAuth.authorizeAsync(policy);\r\n}\r\n\r\nexport function getSpreadsheet(spreadsheetId: string): Spreadsheet {\r\n    // @ts-ignore\r\n    const sheets = gapi.client.sheets;\r\n\r\n    async function readAsync(range: string) {\r\n        const response = await sheets.spreadsheets.values.get({\r\n            spreadsheetId,\r\n            range,\r\n        });\r\n        return response.result;\r\n    }\r\n\r\n    function writeAsync(range: string, values: any[][], asEnteredByUser = false) {\r\n        const valueInputOption = asEnteredByUser ? \"USER_ENTERED\" : \"RAW\";\r\n        const requestBody = {\r\n            values,\r\n        };\r\n        return sheets.spreadsheets.values.update({\r\n            spreadsheetId,\r\n            range,\r\n            valueInputOption,\r\n            requestBody,\r\n        });\r\n    }\r\n\r\n    function appendAsync(\r\n        range: string,\r\n        values: any[][],\r\n        asEnteredByUser = false\r\n    ) {\r\n        const valueInputOption = asEnteredByUser ? \"USER_ENTERED\" : \"RAW\";\r\n        const requestBody = {\r\n            values,\r\n        };\r\n        return sheets.spreadsheets.values.append({\r\n            spreadsheetId,\r\n            range,\r\n            valueInputOption,\r\n            requestBody,\r\n        });\r\n    }\r\n\r\n    return {\r\n        readAsync,\r\n        writeAsync,\r\n        appendAsync,\r\n    };\r\n}\r\n\r\nexport interface Spreadsheet {\r\n    readAsync: (range: string) => Promise<ValueRange>;\r\n    writeAsync: (\r\n        range: string,\r\n        values: any[][],\r\n        asEnteredByUser?: boolean\r\n    ) => Promise<any>;\r\n    appendAsync: (\r\n        range: string,\r\n        values: any[][],\r\n        asEnteredByUser?: boolean\r\n    ) => Promise<any>;\r\n}\r\n\r\nexport interface ValueRange {\r\n    majorDimension?: string | null;\r\n    range?: string | null;\r\n    values?: any[][] | null;\r\n}\r\n","import { StudentFailure } from '../apis/brsApi';\r\nimport { compareNormalized } from './tools';\r\n\r\nconst failureMapping: { [key: string]: StudentFailure } = {\r\n    '-': StudentFailure.NoFailure,\r\n    'Не выбрана': StudentFailure.NotChosen,\r\n    'Не допущен (деканат)': StudentFailure.NotAllowedByDeansOffice,\r\n    'Не явился': StudentFailure.NotAppeared,\r\n    Неуважительная: StudentFailure.DisrespectfulReason,\r\n    Уважительная: StudentFailure.RespectfulReason,\r\n    'Не допущен': StudentFailure.NotAllowedByTeacher,\r\n    'Не должен сдавать': StudentFailure.ShouldNotPass,\r\n    'Академический отпуск': StudentFailure.AcademicLeave,\r\n    Выбыл: StudentFailure.DroppedOut,\r\n};\r\n\r\nexport function parseStudentFailure(input: string): StudentFailure | null {\r\n    if (input === null || input === undefined) {\r\n        return null;\r\n    }\r\n\r\n    for (let key of Object.keys(failureMapping)) {\r\n        if (compareNormalized(key, input)) {\r\n            return failureMapping[key];\r\n        }\r\n    }\r\n\r\n    return StudentFailure.NoFailure;\r\n}\r\n\r\nexport function formatStudentFailure(\r\n    input: StudentFailure | null | undefined\r\n): string | null {\r\n    if (input === null || input === undefined) {\r\n        return null;\r\n    }\r\n\r\n    for (let key of Object.keys(failureMapping)) {\r\n        if (failureMapping[key] === input) {\r\n            return key;\r\n        }\r\n    }\r\n\r\n    return '-';\r\n}\r\n","import { StudentFailure } from '../apis/brsApi';\r\nimport * as googleApi from '../apis/googleApi';\r\nimport { parseStudentFailure } from '../helpers/brsHelpers';\r\n\r\nexport interface ActualStudent {\r\n    fullName: string;\r\n    groupName: string;\r\n    id: string | null;\r\n    failure: StudentFailure | null;\r\n    properties: string[];\r\n}\r\n\r\nexport async function fromSpreadsheetAsync(\r\n    spreadsheetId: string,\r\n    readRange: string,\r\n    fullNameIndex: number = 0,\r\n    groupNameIndex: number = 1,\r\n    idIndex: number | null = null,\r\n    failureIndex: number | null = null\r\n) {\r\n    await googleApi.authorizeAsync();\r\n    const sheet = googleApi.getSpreadsheet(spreadsheetId);\r\n\r\n    const rows = (await sheet.readAsync(readRange)).values || [];\r\n\r\n    const result: ActualStudent[] = [];\r\n    for (const row of rows) {\r\n        const fullName = row[fullNameIndex];\r\n        const groupName = row[groupNameIndex];\r\n        const id = idIndex !== null ? row[idIndex] : null;\r\n        const failure =\r\n            failureIndex !== null\r\n                ? parseStudentFailure(row[failureIndex])\r\n                : null;\r\n        if (fullName && groupName) {\r\n            result.push({\r\n                fullName,\r\n                groupName,\r\n                id: id,\r\n                failure: failure,\r\n                properties: row,\r\n            });\r\n        }\r\n    }\r\n    return result;\r\n}\r\n","import { TermType, Discipline, StudentFailure } from '../apis/brsApi';\r\nimport { MarksData, DisciplineConfig } from './MarksManager';\r\nimport * as readStudents from './readStudentsAsync';\r\nimport { ActualStudent } from './readStudentsAsync';\r\nimport * as googleApi from '../apis/googleApi';\r\nimport { normalizeString, compareNormalized } from '../helpers/tools';\r\nimport { parseStudentFailure } from '../helpers/brsHelpers';\r\nimport { ControlActionConfig } from './MarksManager';\r\n\r\nexport default async function buildAutoMarksConfigAsync(\r\n    spreadsheetId: string,\r\n    sheetName: string,\r\n    isSuitableDiscipline: ((d: Discipline) => boolean) | null = null,\r\n    isSuitableActualStudent: ((s: ActualStudent) => boolean) | null = null\r\n): Promise<MarksData> {\r\n    const rows = await readRowsFromSpreadsheetAsync(spreadsheetId, sheetName);\r\n    const header = getHeader(rows);\r\n\r\n    const indices = buildIndicesBy(header);\r\n    const dataRange = buildDataRange(sheetName, indices);\r\n    const controlActionConfigs = buildControlActionConfig(header, indices);\r\n    const disciplineConfig = buildDisciplineConfig(\r\n        rows,\r\n        indices,\r\n        isSuitableDiscipline\r\n    );\r\n\r\n    const allActualStudents = await readStudents.fromSpreadsheetAsync(\r\n        spreadsheetId,\r\n        dataRange,\r\n        indices.fullNameColumn - indices.left,\r\n        indices.groupColumn - indices.left,\r\n        null,\r\n        indices.failureColumn - indices.left\r\n    );\r\n    const actualStudents = isSuitableActualStudent\r\n        ? allActualStudents.filter(isSuitableActualStudent)\r\n        : allActualStudents;\r\n\r\n    return {\r\n        actualStudents,\r\n        disciplineConfig,\r\n        controlActionConfigs,\r\n    };\r\n}\r\n\r\nasync function readRowsFromSpreadsheetAsync(\r\n    spreadsheetId: string,\r\n    sheetName: string\r\n) {\r\n    const sheet = googleApi.getSpreadsheet(spreadsheetId);\r\n    const rows = (await sheet.readAsync(sheetName + '!A1:ZZ100'))\r\n        .values as string[][];\r\n    return rows || null;\r\n}\r\n\r\nfunction getHeader(rows: string[][]) {\r\n    const header = rows && rows[0];\r\n    if (!header) throw new Error(`Can't read header of spreadsheet`);\r\n    return header;\r\n}\r\n\r\nfunction buildIndicesBy(header: string[]): Indices {\r\n    const defaultGroupColumnName = 'Группа в БРС';\r\n    const defaultFullNameColumnName = 'Фамилия Имя в БРС';\r\n    const defaultFailureColumnName = 'Причина отсутствия';\r\n    const disciplineParameterKeyColumnPrefix = 'Названия параметров';\r\n    const disciplineParameterValueColumnPrefix = 'Значения параметров';\r\n\r\n    const normalizedHeader = header && header.map((s) => normalizeString(s));\r\n    const groupColumnIndex = normalizedHeader.indexOf(\r\n        normalizeString(defaultGroupColumnName)\r\n    );\r\n    const fullNameColumnIndex = normalizedHeader.indexOf(\r\n        normalizeString(defaultFullNameColumnName)\r\n    );\r\n    const failureColumnIndex = normalizedHeader.indexOf(\r\n        normalizeString(defaultFailureColumnName)\r\n    );\r\n    const disciplineParameterKeyColumnIndex = normalizedHeader.indexOf(\r\n        normalizeString(disciplineParameterKeyColumnPrefix)\r\n    );\r\n    const disciplineParameterValueColumnIndex = normalizedHeader.indexOf(\r\n        normalizeString(disciplineParameterValueColumnPrefix)\r\n    );\r\n\r\n    if (\r\n        failureColumnIndex < 0 ||\r\n        groupColumnIndex < 0 ||\r\n        fullNameColumnIndex < 0 ||\r\n        groupColumnIndex > failureColumnIndex ||\r\n        fullNameColumnIndex > failureColumnIndex ||\r\n        Math.abs(fullNameColumnIndex - groupColumnIndex) !== 1 ||\r\n        disciplineParameterKeyColumnIndex < 0 ||\r\n        disciplineParameterValueColumnIndex < 0 ||\r\n        disciplineParameterKeyColumnIndex <= failureColumnIndex ||\r\n        disciplineParameterValueColumnIndex <= failureColumnIndex ||\r\n        disciplineParameterValueColumnIndex !==\r\n            disciplineParameterKeyColumnIndex + 1\r\n    )\r\n        throw new Error(`Wrong order of columns`);\r\n    const leftIndex = Math.min(groupColumnIndex, fullNameColumnIndex);\r\n    const rightIndex = failureColumnIndex;\r\n\r\n    return {\r\n        groupColumn: groupColumnIndex,\r\n        fullNameColumn: fullNameColumnIndex,\r\n        failureColumn: failureColumnIndex,\r\n        disciplineKeyColumn: disciplineParameterKeyColumnIndex,\r\n        disciplineValueColumn: disciplineParameterValueColumnIndex,\r\n        left: leftIndex,\r\n        right: rightIndex,\r\n    };\r\n}\r\n\r\nfunction buildDataRange(sheetName: string, indices: Indices) {\r\n    const leftLetter = String.fromCharCode('A'.charCodeAt(0) + indices.left);\r\n    const rightLetter = String.fromCharCode('A'.charCodeAt(0) + indices.right);\r\n    return `${sheetName}!${leftLetter}2:${rightLetter}`;\r\n}\r\n\r\nfunction buildControlActionConfig(header: string[], indices: Indices) {\r\n    const controlActionConfigs: ControlActionConfig[] = [];\r\n    for (let index = indices.left; index <= indices.right; index++) {\r\n        if (\r\n            index === indices.groupColumn ||\r\n            index === indices.fullNameColumn ||\r\n            index === indices.failureColumn ||\r\n            !header[index]\r\n        ) {\r\n            continue;\r\n        }\r\n        controlActionConfigs.push({\r\n            controlActions: [header[index]],\r\n            propertyIndex: index - indices.left,\r\n        });\r\n    }\r\n\r\n    for (const config of controlActionConfigs) {\r\n        if (config.controlActions.length === 1) {\r\n            const sameColumns = controlActionConfigs.filter(\r\n                (c) =>\r\n                    c.controlActions.length === 1 &&\r\n                    compareNormalized(\r\n                        c.controlActions[0],\r\n                        config.controlActions[0]\r\n                    )\r\n            );\r\n            if (sameColumns.length > 1) {\r\n                config.matchCount = sameColumns.length;\r\n                for (\r\n                    let matchIndex = 0;\r\n                    matchIndex < sameColumns.length;\r\n                    matchIndex++\r\n                ) {\r\n                    sameColumns[matchIndex].matchIndex = matchIndex;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return controlActionConfigs;\r\n}\r\n\r\nfunction buildDisciplineConfig(\r\n    rows: string[][],\r\n    indices: Indices,\r\n    isSuitableDiscipline: ((d: Discipline) => boolean) | null\r\n) {\r\n    const result: DisciplineConfig = {\r\n        name: '',\r\n        year: 0,\r\n        termType: TermType.Fall,\r\n        course: 1,\r\n        isModule: false,\r\n        defaultStudentFailure: StudentFailure.NoFailure,\r\n        isSuitableDiscipline: null,\r\n    };\r\n\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const key = rows[i][indices.disciplineKeyColumn]?.trim();\r\n        if (!key) {\r\n            break;\r\n        }\r\n        const value = rows[i][indices.disciplineValueColumn]?.trim();\r\n        addDisciplineConfigParameter(result, key, value);\r\n    }\r\n\r\n    result.isSuitableDiscipline = isSuitableDiscipline;\r\n    return result;\r\n}\r\n\r\nfunction addDisciplineConfigParameter(\r\n    config: DisciplineConfig,\r\n    key: string,\r\n    value: string\r\n) {\r\n    if (compareNormalized(key, 'Дисциплина')) {\r\n        if (value) {\r\n            config.name = value;\r\n        }\r\n    } else if (compareNormalized(key, 'ИТС')) {\r\n        if (value) {\r\n            config.isModule = value.toLowerCase() === 'да';\r\n        }\r\n    } else if (compareNormalized(key, 'Год')) {\r\n        if (value) {\r\n            config.year = parseInt(value.toLowerCase(), 10);\r\n        }\r\n    } else if (compareNormalized(key, 'Семестр')) {\r\n        if (value) {\r\n            if (value.toLowerCase() === 'осенний') {\r\n                config.termType = TermType.Fall;\r\n            } else if (value.toLowerCase() === 'весенний') {\r\n                config.termType = TermType.Spring;\r\n            }\r\n        }\r\n    } else if (compareNormalized(key, 'Курс')) {\r\n        if (value) {\r\n            config.course = parseInt(value.toLowerCase(), 10);\r\n        }\r\n    } else if (compareNormalized(key, 'Причина отсутствия по умолчанию')) {\r\n        config.defaultStudentFailure =\r\n            parseStudentFailure(value) || StudentFailure.NoFailure;\r\n    }\r\n}\r\n\r\ninterface Indices {\r\n    groupColumn: number;\r\n    fullNameColumn: number;\r\n    failureColumn: number;\r\n    disciplineKeyColumn: number;\r\n    disciplineValueColumn: number;\r\n    left: number;\r\n    right: number;\r\n}\r\n","import React, {FormEvent, memo} from \"react\";\r\nimport buildAutoMarksConfigAsync from \"../functions/buildAutoMarksConfigAsync\";\r\nimport NestedList, {NestedListItem} from \"../components/NestedList\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport SubmitWithLoading from \"../components/SubmitWithLoading\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport './spreadsheet-fetch.css';\r\nimport { MarksData } from \"../functions/MarksManager\";\r\n\r\nclass SpreadsheetFetch extends React.Component<Props, State> {\r\n    tableUrl = '';\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            loading: false,\r\n            tableUrlError: {error: false, message: ''},\r\n            moduleGroups: []\r\n        };\r\n\r\n        this.handleChange = this.handleChange.bind(this);\r\n        this.loadTable = this.loadTable.bind(this);\r\n    }\r\n\r\n    handleChange(event: React.ChangeEvent<{ name?: string | undefined, value: unknown }>) {\r\n        const target = event.target;\r\n        switch (target.name) {\r\n            case 'table-url':\r\n                if (this.state.tableUrlError.error)\r\n                    this.setState({tableUrlError: {error: false, message: ''}});\r\n                this.tableUrl = target.value as string;\r\n        }\r\n    }\r\n\r\n    prepareModuleGroup(marksData: MarksData): NestedListItem {\r\n        const groups = marksData.actualStudents.map(s => s.groupName);\r\n        return {\r\n            title: marksData.disciplineConfig.name,\r\n            nestedItems: Array.from(new Set(groups))\r\n        }\r\n    }\r\n\r\n    async loadTable(e: FormEvent) {\r\n        e.preventDefault();\r\n        this.setState({loading: true});\r\n\r\n        const spreadsheetInfo = await this.getSpreadsheetInfo();\r\n        if (!spreadsheetInfo) {\r\n            this.setState({loading: false});\r\n            return;\r\n        }\r\n\r\n        let marksData: MarksData;\r\n        try {\r\n            marksData = await buildAutoMarksConfigAsync(spreadsheetInfo.spreadsheetId, spreadsheetInfo.sheetName);\r\n        } catch (e) {\r\n            this.setState({loading: false})\r\n            this.props.onError(e.message || JSON.stringify(e));\r\n            return;\r\n        }\r\n        const moduleGroup = this.prepareModuleGroup(marksData);\r\n\r\n        this.setState({\r\n            loading: false,\r\n            moduleGroups: [moduleGroup]\r\n        });\r\n        this.props.onDataLoaded?.call(null, marksData);\r\n    }\r\n\r\n    async getSpreadsheetInfo(): Promise<{ spreadsheetId: string, sheetName: string } | null> {\r\n        const result = this.tableUrl.match(/d\\/(?<id>[a-zA-Z0-9-_]+)\\/edit/);\r\n        if (!result?.groups || !result.groups.id) {\r\n            this.setState({\r\n                loading: false,\r\n                tableUrlError: {error: true, message: 'Неверный url-адрес.'}\r\n            });\r\n            return null;\r\n        }\r\n        const spreadsheetId = result.groups.id;\r\n\r\n        try {\r\n            // @ts-ignore\r\n            const res = await gapi.client.sheets.spreadsheets.get({spreadsheetId});\r\n            const sheetName = JSON.parse(res.body).sheets[0].properties.title;\r\n            return {spreadsheetId, sheetName};\r\n        } catch (e) {\r\n            this.props.onError(e.message || JSON.stringify(e));\r\n            return null;\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <span className={'spreadsheet-fetch'}>\r\n                <h3 className={'header'}>Вставь ссылку на Google Таблицу</h3>\r\n                <form onSubmit={this.loadTable} className={'form'}>\r\n                    <TextField name=\"table-url\"\r\n                               label=\"Ссылка\"\r\n                               type=\"text\"\r\n                               className={'tableUrl'}\r\n                               onChange={this.handleChange}\r\n                               error={this.state.tableUrlError.error}\r\n                               helperText={this.state.tableUrlError.message}\r\n                               required/>\r\n                    <SubmitWithLoading title=\"загрузить\"\r\n                                       loading={this.state.loading}\r\n                                       className={'submit'}/>\r\n                </form>\r\n                <Collapse in={!!this.state.moduleGroups.length}>\r\n                    <NestedList items={this.state.moduleGroups} collapsed={false}/>\r\n                </Collapse>\r\n            </span>\r\n        );\r\n    }\r\n}\r\n\r\nexport default memo(SpreadsheetFetch);\r\n\r\ninterface Props {\r\n    onDataLoaded: (data: MarksData) => void;\r\n    onUnauthorized: () => void;\r\n    onError: (errorMessage: string) => void;\r\n}\r\n\r\ninterface State {\r\n    loading: boolean;\r\n    tableUrlError: { error: boolean, message: string };\r\n    moduleGroups: NestedListItem[];\r\n}\r\n","import React from 'react';\r\nimport {withStyles} from '@material-ui/core/styles';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport MuiDialogTitle from '@material-ui/core/DialogTitle';\r\nimport MuiDialogContent from '@material-ui/core/DialogContent';\r\nimport MuiDialogActions from '@material-ui/core/DialogActions';\r\nimport SubmitWithLoading from \"../components/SubmitWithLoading\";\r\nimport {List} from \"@material-ui/core\";\r\nimport ListItem from \"@material-ui/core/ListItem\";\r\nimport ListItemText from \"@material-ui/core/ListItemText\";\r\nimport MarksManager, {MarksData} from \"../functions/MarksManager\";\r\n\r\nconst DialogContent = withStyles(() => ({\r\n    root: {\r\n        padding: 0,\r\n    },\r\n}))(MuiDialogContent);\r\n\r\nconst DialogActions = withStyles(() => ({\r\n    root: {\r\n        display: 'flex',\r\n        justifyContent: 'space-around'\r\n    },\r\n}))(MuiDialogActions);\r\n\r\nexport default class WorkerDialog extends React.Component<Props, State> {\r\n    marksManager: MarksManager;\r\n\r\n    constructor(props: Props) {\r\n        super(props);\r\n\r\n        this.marksManager = props.marksManager;\r\n\r\n        this.state = {\r\n            okLoading: true,\r\n            cancelPending: false,\r\n            logItems: [],\r\n        };\r\n\r\n        this.cancelWork = this.cancelWork.bind(this);\r\n        this.startWork = this.startWork.bind(this);\r\n        this.logMessage = this.logMessage.bind(this);\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.startWork();\r\n    }\r\n\r\n    logMessage(message: string) {\r\n        this.state.logItems.push(message);\r\n        this.setState({});\r\n    }\r\n\r\n    async startWork() {\r\n        this.marksManager.getLogger().addLogHandler(this.logMessage);\r\n\r\n        await this.marksManager.putMarksToBrsAsync(this.props.marksData);\r\n\r\n        this.setState({\r\n            cancelPending: false,\r\n            okLoading: false\r\n        });\r\n    }\r\n\r\n    cancelWork() {\r\n        this.marksManager?.cancel();\r\n        this.setState({cancelPending: true});\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <Dialog open={this.props.runWork} maxWidth=\"lg\" fullWidth>\r\n                    <MuiDialogTitle>Лог действий</MuiDialogTitle>\r\n                    <DialogContent dividers>\r\n                        <List dense disablePadding style={{minHeight: 400}}>\r\n                            {this.state.logItems.map((item, index) => (\r\n                                <ListItem key={index} style={{paddingTop: 0, paddingBottom: 0}}>\r\n                                    <ListItemText primary={item} style={{marginTop: 2, marginBottom: 2}}/>\r\n                                </ListItem>\r\n                            ))}\r\n                        </List>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <SubmitWithLoading loading={this.state.okLoading}\r\n                                           onClick={this.props.onClosed}\r\n                                           title=\"ок\"/>\r\n                        <SubmitWithLoading loading={this.state.cancelPending}\r\n                                           disabled={!this.state.okLoading}\r\n                                           onClick={this.cancelWork}\r\n                                           title=\"отмена\"/>\r\n                    </DialogActions>\r\n                </Dialog>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\ninterface Props {\r\n    runWork: boolean;\r\n    marksManager: MarksManager;\r\n    marksData: MarksData;\r\n    onClosed: () => void;\r\n}\r\n\r\ninterface State {\r\n    okLoading: boolean;\r\n    cancelPending: boolean;\r\n    logItems: string[];\r\n}\r\n","import React from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Slide from '@material-ui/core/Slide';\r\nimport {TransitionProps} from '@material-ui/core/transitions';\r\nimport {Redirect} from 'react-router-dom';\r\nimport * as cache from \"../helpers/cache\";\r\n\r\nconst Transition = React.forwardRef(function Transition(\r\n    props: TransitionProps & { children?: React.ReactElement<any, any> },\r\n    ref: React.Ref<unknown>,\r\n) {\r\n    return <Slide direction=\"up\" ref={ref} {...props} />;\r\n});\r\n\r\nexport default function UnauthorizedAlert(props: { open: boolean }) {\r\n    const {open} = props;\r\n\r\n    const [redirect, setRedirect] = React.useState(false);\r\n\r\n    const handleOk = () => {\r\n        cache.clear('loginInfo');\r\n        setRedirect(true);\r\n    };\r\n\r\n    return (\r\n        <React.Fragment>\r\n            {redirect && <Redirect to=\"/brs-extensions\"/>}\r\n            <Dialog\r\n                open={open}\r\n                TransitionComponent={Transition}\r\n                keepMounted\r\n                aria-labelledby=\"alert-dialog-slide-title\"\r\n                aria-describedby=\"alert-dialog-slide-description\">\r\n                <DialogTitle id=\"alert-dialog-slide-title\">Необходимо авторизоваться</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText id=\"alert-dialog-slide-description\">\r\n                        Кажется, действие сессии БРС или Google истекло. Необходимо повторно авторизоваться.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions style={{display: 'flex', justifyContent: 'space-around'}}>\r\n                    <Button onClick={handleOk} color=\"primary\">Ок</Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n        </React.Fragment>\r\n    );\r\n}\r\n","const CLIENT_ID = '122993083593-pacve8csj86voko30ia65raeg0ncrtuv.apps.googleusercontent.com';\r\nconst DISCOVERY_DOCS = [\"https://sheets.googleapis.com/$discovery/rest?version=v4\"];\r\nconst SCOPES = \"https://www.googleapis.com/auth/spreadsheets\";\r\n\r\nlet onAuthStatusChangedEvent: (isSignedIn: boolean) => void;\r\nlet onErrorEvent: (error: any) => void;\r\n\r\nconst googleAuth = {\r\n    async init() {\r\n        // @ts-ignore\r\n        if (gapi.client)\r\n            return;\r\n        await new Promise(res => {\r\n            gapi.load('client:auth2', async () => {\r\n                await gapi.client.init({\r\n                    clientId: CLIENT_ID,\r\n                    discoveryDocs: DISCOVERY_DOCS,\r\n                    scope: SCOPES\r\n                }).then(() => {\r\n                    if (!onAuthStatusChangedEvent)\r\n                        return;\r\n                    // @ts-ignore\r\n                    const signedIn = gapi.auth2.getAuthInstance().isSignedIn;\r\n                    signedIn.listen(onAuthStatusChangedEvent);\r\n                }, onErrorEvent);\r\n                res();\r\n            });\r\n        });\r\n    },\r\n\r\n    checkAuth() {\r\n        // @ts-ignore\r\n        return gapi.auth2?.getAuthInstance()?.isSignedIn?.get();\r\n    },\r\n};\r\n\r\nexport default googleAuth;\r\n","export function toShow(fio: string) {\r\n    return fio.replace('ё', 'е').replace(/[ ]+/, ' ');\r\n}\r\n\r\nexport function toKey(fio: string) {\r\n    return fio.toLowerCase().replace('ё', 'е').replace(/[ ]+/, ' ').trim();\r\n}\r\n","import BrsApi from '../apis/brsApi';\r\nimport {\r\n    ControlAction,\r\n    Discipline,\r\n    StudentMark,\r\n    StudentFailure,\r\n} from '../apis/brsApi';\r\nimport { parseAnyFloat, compareNormalized } from '../helpers/tools';\r\nimport * as fio from '../helpers/fio';\r\nimport { ActualStudent } from './readStudentsAsync';\r\nimport { formatStudentFailure } from '../helpers/brsHelpers';\r\nimport { Logger } from '../helpers/logger';\r\n\r\nexport default class DisciplineMarksManager {\r\n    private readonly brsApi: BrsApi;\r\n    private readonly options: PutMarksOptions;\r\n    readonly logger: Logger;\r\n\r\n    constructor(brsApi: BrsApi, logger: Logger, options: PutMarksOptions) {\r\n        this.brsApi = brsApi;\r\n        this.logger = logger;\r\n        this.options = options;\r\n    }\r\n\r\n    async putMarksForDisciplineAsync(\r\n        discipline: Discipline,\r\n        actualStudents: ActualStudent[],\r\n        defaultStudentFailure: StudentFailure,\r\n        controlActionConfigs: ControlActionConfig[]\r\n    ) {\r\n        if (actualStudents.length === 0) return;\r\n        this.logger.log(`# Processing group ${discipline.group}`);\r\n        this.logger.log('');\r\n\r\n        const controlActions = await this.brsApi.getAllControlActionsCachedAsync(\r\n            discipline\r\n        );\r\n        if (\r\n            !this.checkControlActionsConfiguration(\r\n                controlActions,\r\n                controlActionConfigs\r\n            )\r\n        ) {\r\n            return;\r\n        }\r\n\r\n        const brsStudents = await this.brsApi.getAllStudentMarksAsync(\r\n            discipline\r\n        );\r\n        const {\r\n            mergedStudents,\r\n            skippedActualStudents,\r\n            skippedBrsStudents,\r\n        } = this.mergeStudents(actualStudents, brsStudents);\r\n        this.logMergedStudents(\r\n            mergedStudents,\r\n            skippedActualStudents,\r\n            skippedBrsStudents\r\n        );\r\n        this.logger.log('');\r\n\r\n        await this.putMarksForStudentsAsync(\r\n            discipline,\r\n            mergedStudents,\r\n            controlActionConfigs,\r\n            controlActions\r\n        );\r\n        this.logger.log('');\r\n\r\n        await this.updateFailuresForSkippedStudentsAsync(\r\n            skippedBrsStudents,\r\n            discipline,\r\n            defaultStudentFailure\r\n        );\r\n        this.logger.log('');\r\n\r\n        if (this.options.save) {\r\n            await this.brsApi.updateAllMarksAsync(discipline);\r\n        }\r\n\r\n        this.logger.log('');\r\n    }\r\n\r\n    checkControlActionsConfiguration(\r\n        controlActions: ControlAction[],\r\n        controlActionConfigs: ControlActionConfig[]\r\n    ) {\r\n        for (const config of controlActionConfigs) {\r\n            if (!this.getSuitableControlAction(config, controlActions)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    async putMarksForStudentsAsync(\r\n        discipline: Discipline,\r\n        students: MergedStudent[],\r\n        controlActionConfigs: ControlActionConfig[],\r\n        controlActions: ControlAction[]\r\n    ) {\r\n        const statusCounters: { [k: string]: number } = {};\r\n\r\n        for (const student of students) {\r\n            const status = await this.putMarksForStudentAsync(\r\n                discipline,\r\n                student,\r\n                controlActionConfigs,\r\n                controlActions\r\n            );\r\n            if (statusCounters[status] === undefined) {\r\n                statusCounters[status] = 0;\r\n            }\r\n            statusCounters[status]++;\r\n        }\r\n\r\n        this.logger.log('Marks update statuses:');\r\n        for (const k of Object.keys(statusCounters)) {\r\n            this.logger.log(`- ${k} = ${statusCounters[k]}`);\r\n        }\r\n    }\r\n\r\n    async putMarksForStudentAsync(\r\n        discipline: Discipline,\r\n        student: MergedStudent,\r\n        controlActionConfigs: ControlActionConfig[],\r\n        controlActions: ControlAction[]\r\n    ) {\r\n        let updated = 0;\r\n        let failed = 0;\r\n\r\n        const marks = [];\r\n        for (const config of controlActionConfigs) {\r\n            const controlAction = this.getSuitableControlAction(\r\n                config,\r\n                controlActions\r\n            );\r\n            if (!controlAction) {\r\n                throw new Error();\r\n            }\r\n\r\n            const brsMark = parseAnyFloat(\r\n                student.brs[controlAction.uuid] as string\r\n            );\r\n            const actualMark = parseAnyFloat(\r\n                student.actual.properties[config.propertyIndex]\r\n            );\r\n\r\n            if (actualMark === brsMark || actualMark === 0) {\r\n                marks.push(\r\n                    `    ${actualMark} `.substr(`${actualMark}`.length - 1)\r\n                );\r\n                continue;\r\n            } else {\r\n                marks.push(\r\n                    `    ${actualMark}!`.substr(`${actualMark}`.length - 1)\r\n                );\r\n            }\r\n\r\n            try {\r\n                if (this.options.save) {\r\n                    await this.brsApi.putStudentMarkAsync(\r\n                        student.brs.studentUuid,\r\n                        controlAction.uuidWithoutPrefix,\r\n                        actualMark,\r\n                        discipline.groupHistoryId,\r\n                        student.brs.cardType,\r\n                        student.brs.disciplineLoad\r\n                    );\r\n                }\r\n                updated++;\r\n            } catch (error) {\r\n                failed++;\r\n            }\r\n        }\r\n\r\n        const brsFailureStatus = student.brs.failure\r\n            ? (student.brs.failure as StudentFailure)\r\n            : StudentFailure.NoFailure;\r\n        const actualFailure =\r\n            student.actual.failure || StudentFailure.NoFailure;\r\n        let failureStatus = '';\r\n        if (actualFailure === brsFailureStatus) {\r\n            failureStatus = `${formatStudentFailure(actualFailure)}`;\r\n        } else {\r\n            failureStatus = `${formatStudentFailure(actualFailure)}!`;\r\n            try {\r\n                if (this.options.save) {\r\n                    await this.brsApi.putStudentFailureAsync(\r\n                        student.brs.studentUuid,\r\n                        discipline,\r\n                        actualFailure\r\n                    );\r\n                }\r\n                updated++;\r\n            } catch (error) {\r\n                failed++;\r\n            }\r\n        }\r\n\r\n        const status =\r\n            failed > 0 ? 'FAILED ' : updated > 0 ? 'UPDATED' : 'SKIPPED';\r\n        if (this.options.verbose || failed > 0) {\r\n            const studentName = (\r\n                student.actual.fullName + '                              '\r\n            ).substr(0, 30);\r\n            this.logger.log(\r\n                `${status} ${studentName} updated: ${updated}, failed: ${failed}, marks: ${marks.join(\r\n                    ' '\r\n                )}, failureStatus: ${failureStatus}`\r\n            );\r\n        }\r\n        return status;\r\n    }\r\n\r\n    getSuitableControlAction(\r\n        config: ControlActionConfig,\r\n        controlActions: ControlAction[]\r\n    ) {\r\n        const suitableControlActions = controlActions.filter((a) =>\r\n            config.controlActions.some((b) =>\r\n                compareNormalized(a.controlAction, b)\r\n            )\r\n        );\r\n\r\n        if (suitableControlActions.length === 0) {\r\n            this.logger.log(\r\n                `All of ${config.controlActions.join(', ')} not found`\r\n            );\r\n            this.logger.log(\r\n                `Known actions: ${controlActions\r\n                    .map((a) => a.controlAction)\r\n                    .join(', ')}`\r\n            );\r\n            return null;\r\n        }\r\n\r\n        if (\r\n            config.matchIndex !== undefined ||\r\n            config.matchCount !== undefined\r\n        ) {\r\n            if (\r\n                config.matchIndex === undefined ||\r\n                config.matchCount === undefined ||\r\n                suitableControlActions.length !== config.matchCount ||\r\n                config.matchIndex >= config.matchCount\r\n            ) {\r\n                this.logger.log(\r\n                    `Invalid configuration of ${config.controlActions.join(\r\n                        ', '\r\n                    )}`\r\n                );\r\n                this.logger.log(\r\n                    `Can't match: ${config.matchIndex}/${config.matchCount} of ${suitableControlActions.length}`\r\n                );\r\n                return null;\r\n            }\r\n            return suitableControlActions[config.matchIndex];\r\n        }\r\n\r\n        if (suitableControlActions.length > 1) {\r\n            this.logger.log(\r\n                `Several control actions found for ${config.controlActions.join(\r\n                    ', '\r\n                )}`\r\n            );\r\n            this.logger.log(\r\n                `Found actions: ${suitableControlActions\r\n                    .map((a) => a.controlAction)\r\n                    .join(', ')}`\r\n            );\r\n            return null;\r\n        }\r\n\r\n        return suitableControlActions[0];\r\n    }\r\n\r\n    async updateFailuresForSkippedStudentsAsync(\r\n        students: StudentMark[],\r\n        discipline: Discipline,\r\n        defaultStudentFailure: StudentFailure\r\n    ) {\r\n        const statusCounters: { [k: string]: number } = {};\r\n\r\n        for (const student of students) {\r\n            const status = await this.updateFailureForStudent(\r\n                student,\r\n                discipline,\r\n                defaultStudentFailure\r\n            );\r\n            if (statusCounters[status] === undefined) {\r\n                statusCounters[status] = 0;\r\n            }\r\n            statusCounters[status]++;\r\n        }\r\n\r\n        const statusKeys = Object.keys(statusCounters);\r\n        if (statusKeys.length > 0) {\r\n            this.logger.log('Failures update statuses:');\r\n            for (const k of statusKeys) {\r\n                this.logger.log(`- ${k} = ${statusCounters[k]}`);\r\n            }\r\n        } else {\r\n            this.logger.log('No failures for skipped students');\r\n        }\r\n    }\r\n\r\n    async updateFailureForStudent(\r\n        student: StudentMark,\r\n        discipline: Discipline,\r\n        defaultStudentFailure: StudentFailure\r\n    ) {\r\n        let status = '';\r\n        const brsFailureStatus = student.failure\r\n            ? (student.failure as StudentFailure)\r\n            : StudentFailure.NoFailure;\r\n        const actualFailure = defaultStudentFailure;\r\n        if (actualFailure === brsFailureStatus) {\r\n            status = 'SKIPPED';\r\n        } else {\r\n            try {\r\n                if (this.options.save) {\r\n                    await this.brsApi.putStudentFailureAsync(\r\n                        student.studentUuid,\r\n                        discipline,\r\n                        actualFailure\r\n                    );\r\n                }\r\n                status = 'UPDATED';\r\n            } catch (error) {\r\n                status = 'FAILED';\r\n            }\r\n        }\r\n\r\n        if (this.options.verbose || status === 'FAILED') {\r\n            const studentName = (\r\n                student.studentFio + '                              '\r\n            ).substr(0, 30);\r\n            const description =\r\n                status !== 'SKIPPED'\r\n                    ? `${formatStudentFailure(\r\n                          actualFailure\r\n                      )} from ${formatStudentFailure(brsFailureStatus)}`\r\n                    : formatStudentFailure(actualFailure);\r\n            this.logger.log(`${status} ${studentName} ${description}`);\r\n        }\r\n        return status;\r\n    }\r\n\r\n    mergeStudents(actualStudents: ActualStudent[], brsStudents: StudentMark[]) {\r\n        const activeBrsStudents = brsStudents.filter(isStudentActive);\r\n\r\n        const mergedStudents: MergedStudent[] = [];\r\n        const skippedActualStudents: ActualStudent[] = [];\r\n        for (const actualStudent of actualStudents) {\r\n            const suitableStudents = activeBrsStudents.filter((brsStudent) =>\r\n                areStudentsLike(brsStudent, actualStudent)\r\n            );\r\n            if (suitableStudents.length === 1) {\r\n                mergedStudents.push({\r\n                    actual: actualStudent,\r\n                    brs: suitableStudents[0],\r\n                });\r\n            } else {\r\n                skippedActualStudents.push(actualStudent);\r\n            }\r\n        }\r\n\r\n        const skippedBrsStudents: StudentMark[] = [];\r\n        for (const brsStudent of activeBrsStudents) {\r\n            if (\r\n                !mergedStudents.some(\r\n                    (ms) => ms.brs.studentUuid === brsStudent.studentUuid\r\n                )\r\n            ) {\r\n                skippedBrsStudents.push(brsStudent);\r\n            }\r\n        }\r\n\r\n        return { mergedStudents, skippedActualStudents, skippedBrsStudents };\r\n    }\r\n\r\n    logMergedStudents(\r\n        mergedStudents: MergedStudent[],\r\n        skippedActualStudents: ActualStudent[],\r\n        skippedBrsStudents: StudentMark[]\r\n    ) {\r\n        this.logger.log(`Merged students = ${mergedStudents.length}`);\r\n        this.logger.log(\r\n            `Can't merge actual students = ${skippedActualStudents.length}`\r\n        );\r\n        for (const s of skippedActualStudents) {\r\n            this.logger.log('- ' + s.fullName);\r\n        }\r\n        this.logger.log(\r\n            `Can't merge BRS students = ${skippedBrsStudents.length}`\r\n        );\r\n        for (const s of skippedBrsStudents) {\r\n            this.logger.log('- ' + s.studentFio);\r\n        }\r\n    }\r\n}\r\n\r\nfunction isStudentActive(brsStudent: StudentMark) {\r\n    return (\r\n        brsStudent.studentStatus !== 'Переведен' &&\r\n        brsStudent.studentStatus !== 'Отчислен'\r\n    );\r\n}\r\n\r\nfunction areStudentsLike(\r\n    brsStudent: StudentMark,\r\n    actualStudent: ActualStudent\r\n) {\r\n    const brsFullName = fio.toKey(brsStudent.studentFio);\r\n    const actualFullName = fio.toKey(actualStudent.fullName);\r\n    return brsFullName.startsWith(actualFullName);\r\n}\r\n\r\nexport interface ControlActionConfig {\r\n    controlActions: string[];\r\n    matchIndex?: number;\r\n    matchCount?: number;\r\n    propertyIndex: number;\r\n}\r\n\r\nexport interface PutMarksOptions {\r\n    save: boolean;\r\n    verbose: boolean;\r\n}\r\n\r\ninterface MergedStudent {\r\n    actual: ActualStudent;\r\n    brs: StudentMark;\r\n}\r\n","import BrsApi, { Discipline, StudentFailure } from '../apis/brsApi';\r\nimport { compareNormalized } from '../helpers/tools';\r\nimport { Logger } from '../helpers/logger';\r\nimport { ActualStudent } from './readStudentsAsync';\r\nimport DisciplineMarksManager, {\r\n    ControlActionConfig,\r\n    PutMarksOptions,\r\n} from './DisciplineMarksManager';\r\n\r\nexport type { ControlActionConfig, PutMarksOptions };\r\n\r\nexport default class MarksManager {\r\n    private readonly brsApi: BrsApi;\r\n    private readonly logger: Logger;\r\n    private readonly disciplineMarksManager: DisciplineMarksManager;\r\n    private cancelPending: boolean = false;\r\n\r\n    constructor(brsApi: BrsApi, logger: Logger, options: PutMarksOptions) {\r\n        this.brsApi = brsApi;\r\n        this.logger = logger;\r\n        this.disciplineMarksManager = new DisciplineMarksManager(\r\n            brsApi,\r\n            logger,\r\n            options\r\n        );\r\n    }\r\n\r\n    cancel() {\r\n        this.cancelPending = true;\r\n    }\r\n\r\n    async putMarksToBrsAsync(marksData: MarksData) {\r\n        const {\r\n            actualStudents,\r\n            disciplineConfig,\r\n            controlActionConfigs,\r\n        } = marksData;\r\n\r\n        try {\r\n            const disciplines = await this.getSuitableDisciplinesAsync(\r\n                disciplineConfig\r\n            );\r\n\r\n            for (const discipline of disciplines) {\r\n                await this.disciplineMarksManager.putMarksForDisciplineAsync(\r\n                    discipline,\r\n                    actualStudents.filter((s) =>\r\n                        compareNormalized(s.groupName, discipline.group)\r\n                    ),\r\n                    disciplineConfig.defaultStudentFailure,\r\n                    controlActionConfigs\r\n                );\r\n                if (this.cancelPending) {\r\n                    break;\r\n                }\r\n            }\r\n        } catch (e) {\r\n            this.logger.error(e);\r\n        }\r\n    }\r\n\r\n    async getSuitableDisciplinesAsync(disciplineConfig: DisciplineConfig) {\r\n        const allDisciplines = await this.brsApi.getDisciplineCachedAsync(\r\n            disciplineConfig.year,\r\n            disciplineConfig.termType,\r\n            disciplineConfig.course,\r\n            disciplineConfig.isModule\r\n        );\r\n        const disciplines = allDisciplines.filter(\r\n            (d) =>\r\n                compareNormalized(d.discipline, disciplineConfig.name) &&\r\n                (!disciplineConfig.isSuitableDiscipline ||\r\n                    disciplineConfig.isSuitableDiscipline(d))\r\n        );\r\n        return disciplines;\r\n    }\r\n\r\n    getLogger() {\r\n        return this.logger;\r\n    }\r\n}\r\n\r\nexport interface MarksData {\r\n    actualStudents: ActualStudent[];\r\n    disciplineConfig: DisciplineConfig;\r\n    controlActionConfigs: ControlActionConfig[];\r\n}\r\n\r\nexport interface DisciplineConfig {\r\n    name: string;\r\n    year: number;\r\n    termType: number;\r\n    course: number;\r\n    isModule: boolean;\r\n    defaultStudentFailure: StudentFailure;\r\n    isSuitableDiscipline: ((d: Discipline) => boolean) | null;\r\n}\r\n","export class Logger {\r\n    private logHandlers?: ((message: string) => void)[];\r\n    private errorHandler?: ((errorMessage: string) => void)[];\r\n\r\n    addLogHandler(logHandler: ((message: string) => void)) {\r\n        if (!this.logHandlers)\r\n            this.logHandlers = [];\r\n        this.logHandlers.push(logHandler);\r\n    }\r\n\r\n    addErrorHandler(errorHandler: (errorMessage: string) => void) {\r\n        if (!this.errorHandler)\r\n            this.errorHandler = [];\r\n        this.errorHandler.push(errorHandler);\r\n    }\r\n\r\n    log(message: string) {\r\n        if (!this.logHandlers)\r\n            return;\r\n        for (const logHandler of this.logHandlers)\r\n            logHandler(message);\r\n    }\r\n\r\n    error(errorMessage: string) {\r\n        if (!this.errorHandler)\r\n            return;\r\n        for (const errorHandler of this.errorHandler)\r\n            errorHandler(errorMessage);\r\n    }\r\n}\r\n","import React from 'react';\r\nimport {Container} from \"@material-ui/core\";\r\nimport DisciplinesFetch from \"./DisciplinesFetch\";\r\nimport SpreadsheetFetch from \"./SpreadsheetFetch\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport Collapse from \"@material-ui/core/Collapse\";\r\nimport WorkerDialog from \"./WorkerDialog\";\r\nimport {MarksData, PutMarksOptions} from \"../functions/MarksManager\";\r\nimport BrsAuth from \"../apis/brsAuth\";\r\nimport BrsUrlProvider from \"../apis/brsUrlProvider\";\r\nimport BrsApi from \"../apis/brsApi\";\r\nimport UnauthorizedAlert from \"./UnauthorizedAlert\";\r\nimport CustomAlert from \"../components/CustomAlert\";\r\nimport googleAuth from \"../apis/googleAuth\";\r\nimport MarksManager from \"../functions/MarksManager\";\r\nimport {Logger} from \"../helpers/logger\";\r\n\r\nconst brsUrlProvider = new BrsUrlProvider(true);\r\nconst brsAuth = new BrsAuth(brsUrlProvider);\r\nconst brsApi = new BrsApi(brsAuth, brsUrlProvider);\r\n\r\nexport default class WorkPage extends React.Component<{}, State> {\r\n    marksData: MarksData;\r\n    marksManager: MarksManager\r\n\r\n    constructor(props: {}) {\r\n        super(props);\r\n\r\n        this.marksData = {} as any;\r\n        this.marksManager = {} as any;\r\n\r\n        this.state = {\r\n            showControls: false,\r\n            runWork: false,\r\n            openUnauthorizedAlert: false,\r\n            errorMessage: '',\r\n        }\r\n\r\n        this.handleDataLoaded = this.handleDataLoaded.bind(this);\r\n        this.runWork = this.runWork.bind(this);\r\n        this.handleClosed = this.handleClosed.bind(this);\r\n        this.handleUnauthorized = this.handleUnauthorized.bind(this);\r\n        this.handleError = this.handleError.bind(this);\r\n        this.closeError = this.closeError.bind(this);\r\n        this.handleRunWorkSafe = this.handleRunWorkSafe.bind(this);\r\n        this.handleRunWorkUnsafe = this.handleRunWorkUnsafe.bind(this);\r\n    }\r\n\r\n    async componentDidMount() {\r\n        await googleAuth.init();\r\n\r\n        const authorized = brsAuth.checkAuth() && googleAuth.checkAuth();\r\n        if (!authorized)\r\n            this.handleUnauthorized();\r\n    }\r\n\r\n    handleDataLoaded(data: MarksData) {\r\n        this.marksData = data;\r\n        this.setState({showControls: true});\r\n    }\r\n\r\n    runWork(save: boolean) {\r\n        const logger = new Logger();\r\n        logger.addErrorHandler(this.handleError);\r\n\r\n        const options: PutMarksOptions = {save, verbose: true};\r\n\r\n        this.marksManager = new MarksManager(brsApi, logger, options);\r\n\r\n        this.setState({runWork: true});\r\n    }\r\n\r\n    handleRunWorkSafe(){\r\n        this.runWork(false);\r\n    }\r\n\r\n    handleRunWorkUnsafe(){\r\n        this.runWork(true);\r\n    }\r\n\r\n    handleClosed() {\r\n        this.setState({runWork: false});\r\n    }\r\n\r\n    handleUnauthorized() {\r\n        this.setState({openUnauthorizedAlert: true});\r\n    }\r\n\r\n    handleError(error: any) {\r\n        const errorMessage: string = error.message || JSON.stringify(error);\r\n\r\n        if (errorMessage.endsWith(' is Forbidden'))\r\n            this.handleUnauthorized();\r\n        else\r\n            this.setState({errorMessage});\r\n    }\r\n\r\n    closeError() {\r\n        this.setState({errorMessage: ''})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                {this.state.openUnauthorizedAlert && <UnauthorizedAlert open={this.state.openUnauthorizedAlert}/>}\r\n                {this.state.errorMessage && <CustomAlert open={!!this.state.errorMessage}\r\n                                                         message={this.state.errorMessage}\r\n                                                         type={'error'}\r\n                                                         onClose={this.closeError}/>}\r\n                <div className=\"work-page\">\r\n                    <Container maxWidth=\"md\">\r\n                        <DisciplinesFetch brsApi={brsApi} onUnauthorized={this.handleUnauthorized}/>\r\n                        <hr/>\r\n                        <SpreadsheetFetch onDataLoaded={this.handleDataLoaded}\r\n                                          onError={this.handleError}\r\n                                          onUnauthorized={this.handleUnauthorized}/>\r\n                        <br/>\r\n                        <Collapse in={this.state.showControls}>\r\n                            <Grid container justify=\"space-around\">\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\"\r\n                                            onClick={this.handleRunWorkSafe}\r\n                                            color=\"primary\">\r\n                                        Попробуй сделать хорошо\r\n                                    </Button>\r\n                                </Grid>\r\n                                <Grid item>\r\n                                    <Button variant=\"contained\"\r\n                                            onClick={this.handleRunWorkUnsafe}\r\n                                            color=\"secondary\">\r\n                                        Сделай хорошо\r\n                                    </Button>\r\n                                </Grid>\r\n                            </Grid>\r\n                        </Collapse>\r\n                        {\r\n                            this.state.runWork &&\r\n                            <WorkerDialog runWork={this.state.runWork}\r\n                                          marksData={this.marksData}\r\n                                          marksManager={this.marksManager}\r\n                                          onClosed={this.handleClosed}/>\r\n                        }\r\n                    </Container>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\ninterface State {\r\n    showControls: boolean;\r\n    openUnauthorizedAlert: boolean;\r\n    errorMessage: string;\r\n    runWork: boolean;\r\n}\r\n","import React from 'react';\r\nimport {BrowserRouter, Route, Switch} from 'react-router-dom';\r\nimport LoginPage from \"./loginPage/LoginPage\";\r\nimport WorkPage from \"./workPage/WorkPage\";\r\n\r\nexport default function App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/brs-extensions/work\" component={WorkPage}/>\r\n                <Route exact path=\"/brs-extensions\" component={LoginPage}/>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n","import {ReportHandler} from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n    if (onPerfEntry && onPerfEntry instanceof Function) {\r\n        import('web-vitals').then(({getCLS, getFID, getFCP, getLCP, getTTFB}) => {\r\n            getCLS(onPerfEntry);\r\n            getFID(onPerfEntry);\r\n            getFCP(onPerfEntry);\r\n            getLCP(onPerfEntry);\r\n            getTTFB(onPerfEntry);\r\n        });\r\n    }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nimport './index.css';\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <App/>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}