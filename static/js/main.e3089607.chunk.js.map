{"version":3,"sources":["apis/brsApi.ts","Alert.tsx","LoginPage.tsx","WorkPage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["StudentFailure","TermType","baseUrl","brsProxy","authAsync","login","password","a","request","url","method","body","resolveWithFullResponse","simple","headers","response","sessionCookie","filter","cookie","startsWith","split","substr","length","trim","Alert","props","elevation","variant","useStyles","makeStyles","theme","form","width","marginTop","spacing","submit","margin","wrapper","position","buttonProgress","color","blue","top","left","marginLeft","LoginPage","classes","React","useState","loading","setLoading","open","setOpen","sid","localStorage","getItem","redirect","setRedirect","credentials","username","onFieldChanged","e","field","target","id","value","preventDefault","loginSucceed","brsApi","setItem","closeAlert","to","Container","component","maxWidth","className","onSubmit","TextField","required","fullWidth","label","name","autoFocus","onChange","type","autoComplete","Button","disabled","CircularProgress","size","Snackbar","autoHideDuration","anchorOrigin","vertical","horizontal","onClose","severity","WorkPage","App","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.e3089607.chunk.js","sourcesContent":["import 'bluebird';\r\n// import * as fs from 'fs';\r\nimport request from 'request-promise';\r\n// import * as cache from '../helpers/cache';\r\n\r\nconst brsProxy = \"https://brs-proxy.herokuapp.com\"\r\nconst baseUrl = brsProxy + '/brs/https://brs.urfu.ru/mrd';\r\nlet globalSid: string | null = 'null';\r\nlet globalLogin: string | null = null;\r\n\r\nexport function setSid(sid: string) {\r\n    globalSid = sid;\r\n}\r\n\r\nexport enum StudentFailure {\r\n    /** -, дефис, все хорошо */ NoFailure = -1,\r\n    /** Не выбрана */ NotChosen = -19,\r\n    /** Не допущен (деканат) */ NotAllowedByDeansOffice = -18,\r\n    /** Не явился */ NotAppeared = 0,\r\n    /** Неуважительная */ DisrespectfulReason = 12,\r\n    /** Уважительная */ RespectfulReason = 13,\r\n    /** Не допущен */ NotAllowedByTeacher = 18,\r\n    /** Не должен сдавать */ ShouldNotPass = 19,\r\n    /** Академический отпуск */ AcademicLeave = 20,\r\n    /** Выбыл */ DroppedOut = 21,\r\n}\r\n\r\nexport enum TermType {\r\n    Fall = 1,\r\n    Spring = 2,\r\n}\r\n\r\nexport async function getDisciplineCachedAsync(\r\n    year: number,\r\n    termType: TermType,\r\n    course: number,\r\n    isModule: boolean\r\n) {\r\n    const cacheName = `${globalLogin}_getDiscipline_${year}_${termType}_${course}_${isModule}`;\r\n    const cacheResult = null;\r\n    if (cacheResult) {\r\n        return cacheResult;\r\n    }\r\n\r\n    const result = await getDisciplineInternalAsync(\r\n        year,\r\n        termType,\r\n        course,\r\n        isModule\r\n    );\r\n    // cache.save(cacheName, result);\r\n    return result;\r\n}\r\n\r\nexport async function getDisciplineInternalAsync(\r\n    year: number,\r\n    termType: TermType,\r\n    course: number,\r\n    isModule: boolean\r\n) {\r\n    const queryString = `?year=${year}&termType=${termType}&course=${course}&total=0&page=1&pageSize=1000&search=`;\r\n    if (isModule) {\r\n        const disciplines = await requestApiJsonAsync<Discipline[]>(\r\n            '/mvc/mobile/module/fetch' + queryString\r\n        );\r\n        for (const d of disciplines) {\r\n            d.isModule = true;\r\n        }\r\n        return disciplines;\r\n    } else {\r\n        const paging = await requestApiJsonAsync<Paging<Discipline>>(\r\n            '/mvc/mobile/discipline/fetch' + queryString\r\n        );\r\n        const disciplines = paging.content;\r\n        for (const d of disciplines) {\r\n            d.isModule = false;\r\n        }\r\n        return disciplines;\r\n    }\r\n}\r\n\r\nexport async function getAllStudentMarksAsync(discipline: Discipline) {\r\n    const students = [\r\n        ...(await getStudentMarksAsync(discipline, 'lecture', 'current')),\r\n        ...(await getStudentMarksAsync(discipline, 'lecture', 'intermediate')),\r\n        ...(await getStudentMarksAsync(discipline, 'laboratory', 'current')),\r\n        ...(await getStudentMarksAsync(discipline, 'laboratory', 'intermediate')),\r\n    ];\r\n\r\n    const uniqueStudents: { [id: string]: StudentMark } = {};\r\n    for (const s of students) {\r\n        const knownStudent = uniqueStudents[s.studentUuid] || {};\r\n        uniqueStudents[s.studentUuid] = {...knownStudent, ...s};\r\n    }\r\n\r\n    return Object.keys(uniqueStudents).map(k => uniqueStudents[k]);\r\n}\r\n\r\nasync function getStudentMarksAsync(\r\n    discipline: Discipline,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    return getStudentMarksInternalAsync(\r\n        discipline.disciplineLoad,\r\n        discipline.isModule,\r\n        discipline.groupHistoryId,\r\n        discipline.groupId,\r\n        cardType,\r\n        markType\r\n    );\r\n}\r\n\r\nasync function getStudentMarksInternalAsync(\r\n    disciplineLoad: string,\r\n    isModule: boolean,\r\n    groupUuid: string,\r\n    techgroup: string,\r\n    cardType: CardType,\r\n    markType: MarkType,\r\n    isTotal: boolean = false,\r\n    showActiveStudents: boolean = false\r\n) {\r\n    const groupPart = isModule\r\n        ? `techgroup=${techgroup}`\r\n        : `groupUuid=${groupUuid}`;\r\n    return requestApiJsonAsync<StudentMark[]>(\r\n        `/mvc/mobile/studentMarks/fetch?disciplineLoad=${disciplineLoad}&${groupPart}` +\r\n        `&cardType=${cardType}&hasTest=false&isTotal=${isTotal}` +\r\n        `&intermediate=${markType === 'intermediate'}` +\r\n        `&selectedTeachers=null&showActiveStudents=${showActiveStudents}`\r\n    );\r\n}\r\n\r\nexport async function getAllControlActionsCachedAsync(discipline: Discipline) {\r\n    return [\r\n        ...(await getControlActionsCachedAsync(discipline, 'lecture', 'current')),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'lecture',\r\n            'intermediate'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'laboratory',\r\n            'current'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'laboratory',\r\n            'intermediate'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(discipline, 'practice', 'current')),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'practice',\r\n            'intermediate'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'additionalPractice',\r\n            'current'\r\n        )),\r\n        ...(await getControlActionsCachedAsync(\r\n            discipline,\r\n            'additionalPractice',\r\n            'intermediate'\r\n        )),\r\n    ];\r\n}\r\n\r\nasync function getControlActionsCachedAsync(\r\n    discipline: Discipline,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    const cacheName = `${globalLogin}_getControlActions_${discipline.disciplineLoad}_${discipline.isModule}_${discipline.groupHistoryId}_${discipline.groupId}_${cardType}_${markType}`;\r\n    const cacheResult = null//cache.read<ControlAction[]>(cacheName);\r\n    if (cacheResult) {\r\n        return cacheResult;\r\n    }\r\n\r\n    const result = await getControlActionsInternalAsync(\r\n        discipline.disciplineLoad,\r\n        discipline.isModule,\r\n        discipline.groupHistoryId,\r\n        discipline.groupId,\r\n        cardType,\r\n        markType\r\n    );\r\n    // cache.save(cacheName, result);\r\n    return result;\r\n}\r\n\r\nasync function getControlActionsInternalAsync(\r\n    disciplineLoad: string,\r\n    isModule: boolean,\r\n    groupUuid: string,\r\n    techgroup: string,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    const modulePart = isModule ? '/module' : '';\r\n    const groupPart = isModule ? techgroup : groupUuid;\r\n    const response = await requestApiAsync<string>(\r\n        `/mvc/mobile/view/mark/${disciplineLoad}/${groupPart}/teachers${modulePart}/${cardType}/${markType}`\r\n    );\r\n\r\n    const prefix = 'gridColumns = toTextArray(';\r\n    const suffix = ');';\r\n    const linesWithId = response\r\n        .split('\\r\\n')\r\n        .map(s => s.trim())\r\n        .filter(s => s.startsWith(prefix));\r\n    if (linesWithId.length !== 1) {\r\n        throw new Error(\r\n            'Control actions page should contain single line target line with techcard identifier'\r\n        );\r\n    }\r\n\r\n    const columns: Array<{ controlAction: string; uuid: string }> =\r\n        JSON.parse(\r\n            linesWithId[0].substr(\r\n                prefix.length,\r\n                linesWithId[0].length - prefix.length - suffix.length\r\n            )\r\n        ) || [];\r\n\r\n    const uuidPrefix = 'technologyCard';\r\n    const result = columns\r\n        .filter(c => c.uuid && c.uuid.startsWith(uuidPrefix))\r\n        .map(c => ({\r\n            uuid: c.uuid,\r\n            uuidWithoutPrefix: c.uuid.substr(uuidPrefix.length),\r\n            controlAction: c.controlAction,\r\n        }));\r\n    return result as ControlAction[];\r\n}\r\n\r\nexport async function putStudentMarkAsync(\r\n    studentUuid: string,\r\n    controlActionId: string,\r\n    mark: number,\r\n    groupId: string,\r\n    cardTypeKey: CardType,\r\n    disciplineLoadUuid: string\r\n) {\r\n    const body = `student=${studentUuid}&techcard=${controlActionId}&mark=${\r\n        isNaN(mark) ? '' : mark.toString()\r\n    }&groupId=${groupId}&cardTypeKey=${cardTypeKey}&disciplineLoadUuid=${disciplineLoadUuid}`;\r\n    return requestApiJsonAsync<StudentMark>(\r\n        `/mvc/mobile/studentMarks/put`,\r\n        {\r\n            method: 'POST',\r\n            body,\r\n            json: false,\r\n        },\r\n        {\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        }\r\n    );\r\n}\r\n\r\nexport async function putStudentFailureAsync(\r\n    studentUuid: string,\r\n    discipline: Discipline,\r\n    studentFailure: StudentFailure = StudentFailure.NoFailure,\r\n    cardType: CardType = 'lecture'\r\n) {\r\n    const body = `markFailure=${studentFailure}&cardType=${cardType}&disciplineLoad=${discipline.disciplineLoad}&studentId=${studentUuid}`;\r\n    await requestApiAsync(\r\n        `/mvc/mobile/failure/update`,\r\n        {\r\n            method: 'POST',\r\n            body,\r\n            json: false,\r\n        },\r\n        {\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        }\r\n    );\r\n}\r\n\r\nexport async function updateAllMarksAsync(discipline: Discipline) {\r\n    // Одного вызова достаточно, чтобы обновить все оценки по предмету у группы.\r\n    await updateMarksAsync(discipline, 'lecture', 'intermediate');\r\n    // await updateMarksAsync(discipline, 'lecture', 'current');\r\n    // await updateMarksAsync(discipline, 'lecture', 'intermediate');\r\n    // await updateMarksAsync(discipline, 'laboratory', 'current');\r\n    // await updateMarksAsync(discipline, 'laboratory', 'intermediate');\r\n    // await updateMarksAsync(discipline, 'practice', 'current');\r\n    // await updateMarksAsync(discipline, 'practice', 'intermediate');\r\n}\r\n\r\nasync function updateMarksAsync(\r\n    discipline: Discipline,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    return updateMarksInternalAsync(\r\n        discipline.disciplineLoad,\r\n        discipline.isModule,\r\n        discipline.groupHistoryId,\r\n        discipline.groupId,\r\n        cardType,\r\n        markType\r\n    );\r\n}\r\n\r\nasync function updateMarksInternalAsync(\r\n    disciplineLoad: string,\r\n    isModule: boolean,\r\n    groupUuid: string,\r\n    techgroup: string,\r\n    cardType: CardType,\r\n    markType: MarkType\r\n) {\r\n    const modulePart = isModule ? '/module' : '';\r\n    const groupPart = isModule\r\n        ? `techgroup=${techgroup}`\r\n        : `groupUuid=${groupUuid}`;\r\n    const body =\r\n        `disciplineLoad=${disciplineLoad}&${groupPart}` +\r\n        `&cardType=${cardType}&hasTest=false&isTotal=false` +\r\n        `&intermediate=${markType === 'intermediate'}` +\r\n        `&selectedTeachers=null&showActiveStudents=true`;\r\n    return requestApiAsync<string>(\r\n        `/mvc/mobile/updateMarks${modulePart}`,\r\n        {\r\n            method: 'POST',\r\n            body,\r\n            json: false,\r\n        },\r\n        {\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        }\r\n    );\r\n}\r\n\r\nexport async function authByConfigAsync(secretName: string) {\r\n    const secrets = JSON.parse(\"fs.readFileSync('./secrets/brs.json', 'utf8')\");\r\n    const credentials = secrets[secretName] as {\r\n        login: string;\r\n        password: string;\r\n        sid: string; // содержимое Cookie JSSESSIONID, если sid задается, то все login и password не используются\r\n    };\r\n    if (!credentials) {\r\n        throw new Error(`Secret ${secretName} not found`);\r\n    }\r\n    globalSid = credentials.sid\r\n        ? credentials.sid\r\n        : await authAsync(credentials.login, credentials.password);\r\n    globalLogin = credentials.sid ? secretName : credentials.login;\r\n}\r\n\r\nexport async function authAsync(login: string, password: string): Promise<string | null> {\r\n    const response = await request({\r\n        url: baseUrl + `/login`,\r\n        method: 'POST',\r\n        body: `username=${login}&password=${password}`,\r\n        resolveWithFullResponse: true,\r\n        simple: false,\r\n        headers: {\r\n            'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',\r\n        },\r\n    });\r\n    if (!('set-cookie' in response.headers))\r\n        return null;\r\n    const sessionCookie = response.headers['set-cookie']\r\n        .filter((cookie: string) => cookie.startsWith('JSESSIONID='))[0];\r\n    return (sessionCookie as string)\r\n        .split(';')[0]\r\n        .substr('JSESSIONID='.length)\r\n        .trim();\r\n}\r\n\r\nasync function requestApiJsonAsync<T>(\r\n    uri: string,\r\n    options?: RequestOptions,\r\n    headers?: RequestHeaders\r\n): Promise<T> {\r\n    const response = await requestApiAsync<string>(uri, options, headers);\r\n\r\n    if (response.trimLeft().startsWith('<!DOCTYPE html>')) {\r\n        throw new Error(uri + ' is Forbidden');\r\n    }\r\n    return JSON.parse(response);\r\n}\r\n\r\nasync function requestApiAsync<T>(\r\n    uri: string,\r\n    options?: RequestOptions,\r\n    headers?: RequestHeaders\r\n): Promise<T> {\r\n    if (!globalSid) {\r\n        throw new Error(\r\n            'Not authenticated. Use authByConfigAsync or authAsync to authenticate'\r\n        );\r\n    }\r\n    console.log('Sid:', globalSid);\r\n    return request({\r\n        method: 'GET',\r\n        ...options,\r\n        url: baseUrl + uri,\r\n        headers: {\r\n            'X-Cookie': `JSESSIONID=${globalSid}`,\r\n            'X-Requested-With': 'XMLHttpRequest',\r\n            ...headers,\r\n        },\r\n    });\r\n}\r\n\r\ninterface RequestOptions {\r\n    method?: string;\r\n    body?: object | string;\r\n    json?: boolean;\r\n}\r\n\r\ninterface RequestHeaders {\r\n    'Content-Type'?: string;\r\n}\r\n\r\nexport type CardType = 'lecture' | 'laboratory' | 'practice' | 'additionalPractice';\r\nexport type MarkType = 'intermediate' | 'current';\r\n\r\ninterface Paging<T> {\r\n    content: T[];\r\n    last: boolean;\r\n    totalPages: number;\r\n    totalElements: number;\r\n    size: number;\r\n    number: number;\r\n    sort: any;\r\n    first: boolean;\r\n    numberOfElements: number;\r\n}\r\n\r\nexport interface RegisterInfo {\r\n    registerInfoStr: string;\r\n    registerId: number;\r\n    passDate: any;\r\n    cardType: string;\r\n    sheet: string;\r\n}\r\n\r\nexport interface Discipline {\r\n    groupId: string;\r\n    discipline: string;\r\n    group: string;\r\n    registerInfo: RegisterInfo[];\r\n    disciplineLoad: string;\r\n    groupHistoryId: string;\r\n    isModule: boolean;\r\n}\r\n\r\n// eslint-disable-next-line\r\nconst studentMarkSample: StudentMark = {\r\n    studentPersonalNumber: '09800106',\r\n    isEdit: false,\r\n    studentUuid:\r\n        'studen18hc2jg0000magk6mi3iec84bsundigr18hc2jg0000m53o7mlgvora278',\r\n    status: 1,\r\n    studentStatus: 'Активный',\r\n    ignoreCurrentDebars: false,\r\n    studentFio: 'Анисимова Маргарита Васильевна',\r\n    isExtern: false,\r\n    teacherName: '',\r\n    cardType: 'lecture',\r\n    studentName: 'Анисимова М.В.',\r\n    studentGroup: 'РИ-180001',\r\n    registerClosed: false,\r\n    subgroupsITS: '',\r\n    disciplineLoad: 'unpldd18hc2jg0000m5kojcd3te76bnk',\r\n};\r\n\r\nexport interface StudentMark {\r\n    studentPersonalNumber: string;\r\n    isEdit: boolean;\r\n    studentUuid: string;\r\n    status: number;\r\n    studentStatus: string;\r\n    ignoreCurrentDebars: boolean;\r\n    studentFio: string;\r\n    isExtern: boolean;\r\n    teacherName: string;\r\n    cardType: CardType;\r\n    studentName: string;\r\n    studentGroup: string;\r\n    registerClosed: boolean;\r\n    subgroupsITS: string;\r\n    disciplineLoad: string;\r\n    failure?: StudentFailure;\r\n    failureName?: string;\r\n\r\n    [props: string]: number | string | boolean | undefined;\r\n}\r\n\r\nexport interface ControlAction {\r\n    uuid: string;\r\n    uuidWithoutPrefix: string;\r\n    controlAction: string;\r\n}\r\n","import React from \"react\";\r\nimport MuiAlert, { AlertProps } from '@material-ui/lab/Alert';\r\n\r\nexport default function Alert(props: AlertProps) {\r\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\r\n}\r\n","import React, {FormEvent} from 'react';\r\nimport Button from '@material-ui/core/Button';\r\nimport Container from '@material-ui/core/Container';\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport * as brsApi from './apis/brsApi'\r\nimport {CircularProgress} from \"@material-ui/core\";\r\nimport blue from \"@material-ui/core/colors/blue\";\r\nimport Snackbar from \"@material-ui/core/Snackbar\";\r\nimport Alert from \"./Alert\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(3, 0, 2),\r\n    },\r\n    wrapper: {\r\n        margin: theme.spacing(1),\r\n        position: 'relative',\r\n    },\r\n    buttonProgress: {\r\n        color: blue[\"A700\"],\r\n        position: 'absolute',\r\n        top: '55%',\r\n        left: '50%',\r\n        marginTop: -12,\r\n        marginLeft: -12,\r\n    }\r\n}));\r\n\r\nexport default function LoginPage() {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [open, setOpen] = React.useState(false);\r\n    const sid = localStorage.getItem('sid')\r\n    const [redirect, setRedirect] = React.useState(!!sid);\r\n\r\n    const credentials: Credentials = {\r\n        username: '',\r\n        password: ''\r\n    }\r\n\r\n    function onFieldChanged(e: React.ChangeEvent<HTMLInputElement>) {\r\n        const field = e.target\r\n        credentials[field.id] = field.value\r\n    }\r\n\r\n    async function onSubmit(e: FormEvent) {\r\n        e.preventDefault()\r\n        setLoading(true)\r\n        const loginSucceed = await login()\r\n        setLoading(false)\r\n        if (loginSucceed)\r\n            setRedirect(true)\r\n        setOpen(true)\r\n    }\r\n\r\n    async function login() {\r\n        const sid = await brsApi.authAsync(credentials.username, credentials.password)\r\n        if (!sid) {\r\n            return false\r\n        }\r\n        localStorage.setItem('sid', sid)\r\n        return true\r\n    }\r\n\r\n    function closeAlert() {\r\n        setOpen(false)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            {redirect && <Redirect to=\"/work\"/>}\r\n            <Container component=\"main\" maxWidth=\"md\">\r\n                <h1>Привет!</h1>\r\n                <h3>Как все работает</h3>\r\n                <p>Как-то все работает</p>\r\n                <h3>Правила хранения данных</h3>\r\n                <p>Данные хранятся в localstorage</p>\r\n                <hr/>\r\n                <p>Для начала работы, необходимо авторизоваться в БРС</p>\r\n                <Container maxWidth=\"xs\">\r\n                    <form className={classes.form} onSubmit={onSubmit}>\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            id=\"username\"\r\n                            label=\"Имя пользователя\"\r\n                            name=\"username\"\r\n                            autoFocus\r\n                            onChange={onFieldChanged}\r\n                        />\r\n                        <TextField\r\n                            variant=\"outlined\"\r\n                            margin=\"normal\"\r\n                            required\r\n                            fullWidth\r\n                            name=\"password\"\r\n                            label=\"Пароль\"\r\n                            type=\"password\"\r\n                            id=\"password\"\r\n                            autoComplete=\"current-password\"\r\n                            onChange={onFieldChanged}\r\n                        />\r\n                        <div className={classes.wrapper}>\r\n                            <Button\r\n                                type=\"submit\"\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                className={classes.submit}\r\n                                disabled={loading}\r\n                            >\r\n                                Начать работу\r\n                            </Button>\r\n                            {\r\n                                loading &&\r\n                                <CircularProgress color=\"secondary\" size={24} className={classes.buttonProgress}/>\r\n                            }\r\n                        </div>\r\n                    </form>\r\n                </Container>\r\n                <Snackbar\r\n                    open={open}\r\n                    autoHideDuration={5000}\r\n                    anchorOrigin={{vertical: 'top', horizontal: 'center'}}\r\n                    onClose={closeAlert}>\r\n                    <Alert severity=\"error\" onClose={closeAlert}>\r\n                        Неверные имя пользователя или пароль\r\n                    </Alert>\r\n                </Snackbar>\r\n            </Container>\r\n        </div>\r\n    )\r\n}\r\n\r\ninterface Credentials {\r\n    username: string\r\n    password: string\r\n\r\n    [props: string]: string\r\n}\r\n","import React, {FormEvent} from 'react';\r\n\r\nexport default function WorkPage(){\r\n    return (\r\n        <div>\r\n            Work Page :3\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport LoginPage from \"./LoginPage\";\r\nimport WorkPage from \"./WorkPage\";\r\n\r\nfunction App() {\r\n    return (\r\n        <BrowserRouter>\r\n            <Switch>\r\n                <Route path=\"/work\" component={WorkPage}/>\r\n                <Route component={LoginPage}/>\r\n            </Switch>\r\n        </BrowserRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);  \r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n}\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}